<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2134" onload="init(evt)" viewBox="0 0 1200 2134" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="2134.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="2117" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="2117" > </text>
<g id="frames">
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="981" width="0.3" height="15.0" fill="rgb(229,150,46)" rx="2" ry="2" />
<text  x="1186.83" y="991.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (30 samples, 0.20%)</title><rect x="440.5" y="1957" width="2.4" height="15.0" fill="rgb(222,41,54)" rx="2" ry="2" />
<text  x="443.49" y="1967.5" ></text>
</g>
<g >
<title>c10::DispatchKeySet::has (2 samples, 0.01%)</title><rect x="639.4" y="1893" width="0.2" height="15.0" fill="rgb(207,139,22)" rx="2" ry="2" />
<text  x="642.41" y="1903.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (4 samples, 0.03%)</title><rect x="740.8" y="2037" width="0.4" height="15.0" fill="rgb(249,13,3)" rx="2" ry="2" />
<text  x="743.85" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1183.8" y="1989" width="0.3" height="15.0" fill="rgb(244,206,50)" rx="2" ry="2" />
<text  x="1186.75" y="1999.5" ></text>
</g>
<g >
<title>__tls_get_addr (2 samples, 0.01%)</title><rect x="467.7" y="1909" width="0.1" height="15.0" fill="rgb(210,71,22)" rx="2" ry="2" />
<text  x="470.69" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1109" width="0.3" height="15.0" fill="rgb(216,173,38)" rx="2" ry="2" />
<text  x="1186.83" y="1119.5" ></text>
</g>
<g >
<title>c10::OperatorHandle::callUnboxed&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;&gt; (2 samples, 0.01%)</title><rect x="471.3" y="1909" width="0.2" height="15.0" fill="rgb(207,165,50)" rx="2" ry="2" />
<text  x="474.33" y="1919.5" ></text>
</g>
<g >
<title>strlen@plt (2 samples, 0.01%)</title><rect x="460.3" y="1941" width="0.1" height="15.0" fill="rgb(244,39,4)" rx="2" ry="2" />
<text  x="463.26" y="1951.5" ></text>
</g>
<g >
<title>Eigen::internal::gebp_kernel&lt;float, float, long, Eigen::internal::blas_data_mapper&lt;float, long, 0, 0, 1&gt;, 8, 4, false, false&gt;::operator (518 samples, 3.47%)</title><rect x="127.8" y="1973" width="41.0" height="15.0" fill="rgb(254,110,10)" rx="2" ry="2" />
<text  x="130.80" y="1983.5" >Eig..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1701" width="0.4" height="15.0" fill="rgb(215,105,25)" rx="2" ry="2" />
<text  x="1186.44" y="1711.5" ></text>
</g>
<g >
<title>onmt::ITokenizer::tokenize (4 samples, 0.03%)</title><rect x="635.0" y="1957" width="0.3" height="15.0" fill="rgb(208,117,41)" rx="2" ry="2" />
<text  x="637.98" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="661" width="6.7" height="15.0" fill="rgb(225,36,33)" rx="2" ry="2" />
<text  x="65.73" y="671.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="677" width="6.7" height="15.0" fill="rgb(254,172,43)" rx="2" ry="2" />
<text  x="65.73" y="687.5" ></text>
</g>
<g >
<title>c10::impl::InlineDeviceGuard&lt;c10::impl::VirtualGuardImpl&gt;::InlineDeviceGuard (4 samples, 0.03%)</title><rect x="473.2" y="1925" width="0.3" height="15.0" fill="rgb(223,99,41)" rx="2" ry="2" />
<text  x="476.22" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1183.8" y="2053" width="0.3" height="15.0" fill="rgb(242,220,50)" rx="2" ry="2" />
<text  x="1186.75" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="439.4" y="1781" width="0.1" height="15.0" fill="rgb(226,193,44)" rx="2" ry="2" />
<text  x="442.39" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="277" width="0.3" height="15.0" fill="rgb(225,193,51)" rx="2" ry="2" />
<text  x="1186.83" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate@plt (2 samples, 0.01%)</title><rect x="1168.4" y="2053" width="0.2" height="15.0" fill="rgb(219,53,3)" rx="2" ry="2" />
<text  x="1171.42" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (69 samples, 0.46%)</title><rect x="1151.5" y="2021" width="5.5" height="15.0" fill="rgb(220,166,10)" rx="2" ry="2" />
<text  x="1154.50" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="917" width="6.7" height="15.0" fill="rgb(253,49,25)" rx="2" ry="2" />
<text  x="65.73" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="452.0" y="1301" width="0.2" height="15.0" fill="rgb(225,209,41)" rx="2" ry="2" />
<text  x="455.04" y="1311.5" ></text>
</g>
<g >
<title>c10::TensorImpl::requires_grad (4 samples, 0.03%)</title><rect x="648.2" y="2005" width="0.3" height="15.0" fill="rgb(247,26,14)" rx="2" ry="2" />
<text  x="651.19" y="2015.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (33 samples, 0.22%)</title><rect x="738.0" y="2037" width="2.6" height="15.0" fill="rgb(239,89,27)" rx="2" ry="2" />
<text  x="741.00" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (2 samples, 0.01%)</title><rect x="444.8" y="1973" width="0.1" height="15.0" fill="rgb(208,21,31)" rx="2" ry="2" />
<text  x="447.76" y="1983.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::squeeze_dim (2 samples, 0.01%)</title><rect x="464.8" y="1909" width="0.1" height="15.0" fill="rgb(219,16,48)" rx="2" ry="2" />
<text  x="467.76" y="1919.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="472.4" y="1941" width="0.2" height="15.0" fill="rgb(207,108,53)" rx="2" ry="2" />
<text  x="475.35" y="1951.5" ></text>
</g>
<g >
<title>TClusterer::Cluster (3,013 samples, 20.19%)</title><rect x="182.8" y="2005" width="238.2" height="15.0" fill="rgb(243,89,30)" rx="2" ry="2" />
<text  x="185.75" y="2015.5" >TClusterer::Cluster</text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="629" width="6.7" height="15.0" fill="rgb(206,59,39)" rx="2" ry="2" />
<text  x="65.73" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1445" width="0.3" height="15.0" fill="rgb(212,147,44)" rx="2" ry="2" />
<text  x="1186.83" y="1455.5" ></text>
</g>
<g >
<title>__dynamic_cast (9 samples, 0.06%)</title><rect x="473.5" y="1941" width="0.8" height="15.0" fill="rgb(234,88,48)" rx="2" ry="2" />
<text  x="476.54" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="452.4" y="1461" width="0.7" height="15.0" fill="rgb(249,203,35)" rx="2" ry="2" />
<text  x="455.43" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1183.4" y="1749" width="0.4" height="15.0" fill="rgb(241,103,26)" rx="2" ry="2" />
<text  x="1186.36" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="451.5" y="1733" width="0.7" height="15.0" fill="rgb(235,80,9)" rx="2" ry="2" />
<text  x="454.48" y="1743.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (2 samples, 0.01%)</title><rect x="635.3" y="1957" width="0.2" height="15.0" fill="rgb(253,161,33)" rx="2" ry="2" />
<text  x="638.30" y="1967.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (30 samples, 0.20%)</title><rect x="440.5" y="1973" width="2.4" height="15.0" fill="rgb(241,157,2)" rx="2" ry="2" />
<text  x="443.49" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="485" width="0.4" height="15.0" fill="rgb(206,112,44)" rx="2" ry="2" />
<text  x="1186.44" y="495.5" ></text>
</g>
<g >
<title>c10::Dispatcher::singleton (2 samples, 0.01%)</title><rect x="474.5" y="1941" width="0.1" height="15.0" fill="rgb(215,181,12)" rx="2" ry="2" />
<text  x="477.49" y="1951.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (3 samples, 0.02%)</title><rect x="171.4" y="1941" width="0.2" height="15.0" fill="rgb(223,227,46)" rx="2" ry="2" />
<text  x="174.37" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1573" width="6.7" height="15.0" fill="rgb(241,79,45)" rx="2" ry="2" />
<text  x="65.73" y="1583.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (466 samples, 3.12%)</title><rect x="10.3" y="2053" width="36.9" height="15.0" fill="rgb(236,156,7)" rx="2" ry="2" />
<text  x="13.32" y="2063.5" >[li..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="133" width="0.4" height="15.0" fill="rgb(210,87,54)" rx="2" ry="2" />
<text  x="1186.44" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="53" width="0.3" height="15.0" fill="rgb(247,211,36)" rx="2" ry="2" />
<text  x="1186.83" y="63.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (2 samples, 0.01%)</title><rect x="438.4" y="1957" width="0.2" height="15.0" fill="rgb(243,49,23)" rx="2" ry="2" />
<text  x="441.44" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="743.5" y="2021" width="0.2" height="15.0" fill="rgb(252,117,8)" rx="2" ry="2" />
<text  x="746.46" y="2031.5" ></text>
</g>
<g >
<title>at::empty (2 samples, 0.01%)</title><rect x="756.8" y="2021" width="0.2" height="15.0" fill="rgb(230,153,47)" rx="2" ry="2" />
<text  x="759.82" y="2031.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (3 samples, 0.02%)</title><rect x="1187.0" y="2053" width="0.2" height="15.0" fill="rgb(233,134,34)" rx="2" ry="2" />
<text  x="1190.00" y="2063.5" ></text>
</g>
<g >
<title>kmp_flag_64::wait (152 samples, 1.02%)</title><rect x="1008.4" y="2053" width="12.0" height="15.0" fill="rgb(251,129,39)" rx="2" ry="2" />
<text  x="1011.39" y="2063.5" ></text>
</g>
<g >
<title>THFloatTensor_addmmImpl (2 samples, 0.01%)</title><rect x="639.0" y="2005" width="0.2" height="15.0" fill="rgb(208,203,3)" rx="2" ry="2" />
<text  x="642.02" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1173" width="0.4" height="15.0" fill="rgb(216,74,23)" rx="2" ry="2" />
<text  x="1186.44" y="1183.5" ></text>
</g>
<g >
<title>__sched_yield (6 samples, 0.04%)</title><rect x="753.4" y="2053" width="0.5" height="15.0" fill="rgb(236,9,23)" rx="2" ry="2" />
<text  x="756.42" y="2063.5" ></text>
</g>
<g >
<title>TDbDocument::TDbDocument (2 samples, 0.01%)</title><rect x="421.1" y="1973" width="0.2" height="15.0" fill="rgb(238,56,3)" rx="2" ry="2" />
<text  x="424.12" y="1983.5" ></text>
</g>
<g >
<title>operator delete@plt (2 samples, 0.01%)</title><rect x="123.4" y="2021" width="0.1" height="15.0" fill="rgb(214,51,11)" rx="2" ry="2" />
<text  x="126.37" y="2031.5" ></text>
</g>
<g >
<title>c10::UndefinedTensorImpl::~UndefinedTensorImpl (27 samples, 0.18%)</title><rect x="646.8" y="2037" width="2.1" height="15.0" fill="rgb(244,66,45)" rx="2" ry="2" />
<text  x="649.77" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::operator== (3 samples, 0.02%)</title><rect x="450.7" y="1909" width="0.2" height="15.0" fill="rgb(236,85,0)" rx="2" ry="2" />
<text  x="453.69" y="1919.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (135 samples, 0.90%)</title><rect x="1056.8" y="2037" width="10.7" height="15.0" fill="rgb(237,42,42)" rx="2" ry="2" />
<text  x="1059.78" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (25 samples, 0.17%)</title><rect x="1181.2" y="2053" width="2.0" height="15.0" fill="rgb(226,34,40)" rx="2" ry="2" />
<text  x="1184.22" y="2063.5" ></text>
</g>
<g >
<title>malloc (40 samples, 0.27%)</title><rect x="671.4" y="2037" width="3.1" height="15.0" fill="rgb(243,49,35)" rx="2" ry="2" />
<text  x="674.35" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (4 samples, 0.03%)</title><rect x="446.3" y="1877" width="0.4" height="15.0" fill="rgb(230,150,29)" rx="2" ry="2" />
<text  x="449.34" y="1887.5" ></text>
</g>
<g >
<title>virtual thunk to std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_istringstream (4 samples, 0.03%)</title><rect x="745.3" y="2037" width="0.3" height="15.0" fill="rgb(245,169,21)" rx="2" ry="2" />
<text  x="748.28" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="741" width="6.7" height="15.0" fill="rgb(234,192,46)" rx="2" ry="2" />
<text  x="65.73" y="751.5" ></text>
</g>
<g >
<title>DetectLanguage (13 samples, 0.09%)</title><rect x="449.9" y="1957" width="1.0" height="15.0" fill="rgb(207,19,2)" rx="2" ry="2" />
<text  x="452.90" y="1967.5" ></text>
</g>
<g >
<title>at::native::make_reduction (9 samples, 0.06%)</title><rect x="755.8" y="2037" width="0.7" height="15.0" fill="rgb(212,66,21)" rx="2" ry="2" />
<text  x="758.79" y="2047.5" ></text>
</g>
<g >
<title>THTensor_setStorage@plt (2 samples, 0.01%)</title><rect x="469.4" y="1781" width="0.2" height="15.0" fill="rgb(231,180,35)" rx="2" ry="2" />
<text  x="472.43" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1109" width="6.7" height="15.0" fill="rgb(222,48,5)" rx="2" ry="2" />
<text  x="65.73" y="1119.5" ></text>
</g>
<g >
<title>fasttext::NegativeSamplingLoss::NegativeSamplingLoss (3 samples, 0.02%)</title><rect x="654.9" y="2037" width="0.2" height="15.0" fill="rgb(222,174,45)" rx="2" ry="2" />
<text  x="657.91" y="2047.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set (16 samples, 0.11%)</title><rect x="678.8" y="2037" width="1.3" height="15.0" fill="rgb(207,122,29)" rx="2" ry="2" />
<text  x="681.79" y="2047.5" ></text>
</g>
<g >
<title>at::native::mm_cpu_out (5 samples, 0.03%)</title><rect x="66.8" y="53" width="0.4" height="15.0" fill="rgb(228,183,28)" rx="2" ry="2" />
<text  x="69.77" y="63.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1269" width="6.7" height="15.0" fill="rgb(235,193,35)" rx="2" ry="2" />
<text  x="65.73" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="451.7" y="1061" width="0.2" height="15.0" fill="rgb(233,104,1)" rx="2" ry="2" />
<text  x="454.72" y="1071.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::clear (7 samples, 0.05%)</title><rect x="1031.6" y="2053" width="0.6" height="15.0" fill="rgb(206,111,27)" rx="2" ry="2" />
<text  x="1034.64" y="2063.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::div_Tensor (4 samples, 0.03%)</title><rect x="742.5" y="2037" width="0.3" height="15.0" fill="rgb(233,134,14)" rx="2" ry="2" />
<text  x="745.51" y="2047.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (16 samples, 0.11%)</title><rect x="430.7" y="1941" width="1.3" height="15.0" fill="rgb(245,130,24)" rx="2" ry="2" />
<text  x="433.69" y="1951.5" ></text>
</g>
<g >
<title>c10::TensorType::TensorType (2 samples, 0.01%)</title><rect x="1152.3" y="1941" width="0.1" height="15.0" fill="rgb(238,212,20)" rx="2" ry="2" />
<text  x="1155.29" y="1951.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (16 samples, 0.11%)</title><rect x="454.7" y="1925" width="1.3" height="15.0" fill="rgb(247,118,47)" rx="2" ry="2" />
<text  x="457.72" y="1935.5" ></text>
</g>
<g >
<title>at::native::copy_ (8 samples, 0.05%)</title><rect x="755.0" y="2053" width="0.6" height="15.0" fill="rgb(210,57,28)" rx="2" ry="2" />
<text  x="758.00" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="451.6" y="1685" width="0.6" height="15.0" fill="rgb(235,179,34)" rx="2" ry="2" />
<text  x="454.56" y="1695.5" ></text>
</g>
<g >
<title>torch::autograd::impl::grad_accumulator (4 samples, 0.03%)</title><rect x="643.2" y="1989" width="0.3" height="15.0" fill="rgb(231,121,23)" rx="2" ry="2" />
<text  x="646.21" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="373" width="6.7" height="15.0" fill="rgb(232,147,38)" rx="2" ry="2" />
<text  x="65.73" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1183.8" y="1973" width="0.3" height="15.0" fill="rgb(218,7,28)" rx="2" ry="2" />
<text  x="1186.75" y="1983.5" ></text>
</g>
<g >
<title>at::native::legacy::cpu::_th_set_ (3 samples, 0.02%)</title><rect x="469.7" y="1781" width="0.2" height="15.0" fill="rgb(207,175,46)" rx="2" ry="2" />
<text  x="472.67" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="638.1" y="2021" width="0.1" height="15.0" fill="rgb(248,71,50)" rx="2" ry="2" />
<text  x="641.07" y="2031.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::scan_string (127 samples, 0.85%)</title><rect x="172.2" y="1941" width="10.0" height="15.0" fill="rgb(242,111,2)" rx="2" ry="2" />
<text  x="175.16" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="965" width="0.3" height="15.0" fill="rgb(218,187,32)" rx="2" ry="2" />
<text  x="1186.83" y="975.5" ></text>
</g>
<g >
<title>std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;::~vector (3 samples, 0.02%)</title><rect x="642.3" y="1973" width="0.2" height="15.0" fill="rgb(218,108,20)" rx="2" ry="2" />
<text  x="645.26" y="1983.5" ></text>
</g>
<g >
<title>at::native::mm_cpu (5 samples, 0.03%)</title><rect x="643.1" y="2005" width="0.4" height="15.0" fill="rgb(240,86,17)" rx="2" ry="2" />
<text  x="646.13" y="2015.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (2 samples, 0.01%)</title><rect x="741.4" y="2037" width="0.2" height="15.0" fill="rgb(221,187,47)" rx="2" ry="2" />
<text  x="744.40" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="197" width="0.4" height="15.0" fill="rgb(244,178,17)" rx="2" ry="2" />
<text  x="1186.44" y="207.5" ></text>
</g>
<g >
<title>[unknown] (83 samples, 0.56%)</title><rect x="62.7" y="149" width="6.6" height="15.0" fill="rgb(230,1,51)" rx="2" ry="2" />
<text  x="65.73" y="159.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (26 samples, 0.17%)</title><rect x="442.9" y="2005" width="2.0" height="15.0" fill="rgb(251,212,49)" rx="2" ry="2" />
<text  x="445.86" y="2015.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (8 samples, 0.05%)</title><rect x="443.9" y="1989" width="0.6" height="15.0" fill="rgb(236,17,3)" rx="2" ry="2" />
<text  x="446.89" y="1999.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (2 samples, 0.01%)</title><rect x="1186.1" y="2053" width="0.2" height="15.0" fill="rgb(234,24,19)" rx="2" ry="2" />
<text  x="1189.13" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="451.6" y="1461" width="0.3" height="15.0" fill="rgb(252,150,25)" rx="2" ry="2" />
<text  x="454.64" y="1471.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1637" width="6.7" height="15.0" fill="rgb(227,3,22)" rx="2" ry="2" />
<text  x="65.73" y="1647.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (11 samples, 0.07%)</title><rect x="618.9" y="1941" width="0.9" height="15.0" fill="rgb(216,37,42)" rx="2" ry="2" />
<text  x="621.94" y="1951.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (2 samples, 0.01%)</title><rect x="126.6" y="2021" width="0.2" height="15.0" fill="rgb(241,217,21)" rx="2" ry="2" />
<text  x="129.62" y="2031.5" ></text>
</g>
<g >
<title>TNewsCluster::CalcImportance (181 samples, 1.21%)</title><rect x="422.2" y="1957" width="14.3" height="15.0" fill="rgb(246,205,1)" rx="2" ry="2" />
<text  x="425.15" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="261" width="0.4" height="15.0" fill="rgb(236,160,52)" rx="2" ry="2" />
<text  x="1186.44" y="271.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1157" width="6.7" height="15.0" fill="rgb(227,212,37)" rx="2" ry="2" />
<text  x="65.73" y="1167.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="869" width="6.7" height="15.0" fill="rgb(251,63,43)" rx="2" ry="2" />
<text  x="65.73" y="879.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1317" width="6.7" height="15.0" fill="rgb(214,55,34)" rx="2" ry="2" />
<text  x="65.73" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="325" width="0.4" height="15.0" fill="rgb(217,177,36)" rx="2" ry="2" />
<text  x="1186.44" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="436.9" y="1957" width="0.1" height="15.0" fill="rgb(227,4,47)" rx="2" ry="2" />
<text  x="439.86" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1183.8" y="1797" width="0.3" height="15.0" fill="rgb(239,124,32)" rx="2" ry="2" />
<text  x="1186.75" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.07%)</title><rect x="452.3" y="1685" width="0.8" height="15.0" fill="rgb(214,16,36)" rx="2" ry="2" />
<text  x="455.27" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="773" width="6.7" height="15.0" fill="rgb(233,224,13)" rx="2" ry="2" />
<text  x="65.73" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.07%)</title><rect x="452.3" y="1669" width="0.8" height="15.0" fill="rgb(223,23,53)" rx="2" ry="2" />
<text  x="455.27" y="1679.5" ></text>
</g>
<g >
<title>torch::autograd::impl::version_counter@plt (2 samples, 0.01%)</title><rect x="647.7" y="1973" width="0.2" height="15.0" fill="rgb(237,98,18)" rx="2" ry="2" />
<text  x="650.71" y="1983.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (416 samples, 2.79%)</title><rect x="1034.6" y="2053" width="32.9" height="15.0" fill="rgb(217,73,0)" rx="2" ry="2" />
<text  x="1037.56" y="2063.5" >on..</text>
</g>
<g >
<title>TDbDocument::TDbDocument (3 samples, 0.02%)</title><rect x="447.1" y="1989" width="0.2" height="15.0" fill="rgb(227,168,45)" rx="2" ry="2" />
<text  x="450.05" y="1999.5" ></text>
</g>
<g >
<title>torch::autograd::generated::DivBackward0::~DivBackward0 (3 samples, 0.02%)</title><rect x="743.5" y="2037" width="0.2" height="15.0" fill="rgb(232,95,51)" rx="2" ry="2" />
<text  x="746.46" y="2047.5" ></text>
</g>
<g >
<title>TNewsCluster::TNewsCluster (3 samples, 0.02%)</title><rect x="421.1" y="2005" width="0.3" height="15.0" fill="rgb(229,223,35)" rx="2" ry="2" />
<text  x="424.12" y="2015.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::append (10 samples, 0.07%)</title><rect x="1030.8" y="2053" width="0.8" height="15.0" fill="rgb(253,130,37)" rx="2" ry="2" />
<text  x="1033.85" y="2063.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (4 samples, 0.03%)</title><rect x="446.3" y="1957" width="0.4" height="15.0" fill="rgb(241,15,23)" rx="2" ry="2" />
<text  x="449.34" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.3" y="2021" width="0.5" height="15.0" fill="rgb(210,109,41)" rx="2" ry="2" />
<text  x="1186.28" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="451.7" y="1045" width="0.2" height="15.0" fill="rgb(206,52,23)" rx="2" ry="2" />
<text  x="454.72" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="451.7" y="1253" width="0.2" height="15.0" fill="rgb(233,110,29)" rx="2" ry="2" />
<text  x="454.72" y="1263.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="459.5" y="1909" width="0.3" height="15.0" fill="rgb(238,104,4)" rx="2" ry="2" />
<text  x="462.55" y="1919.5" ></text>
</g>
<g >
<title>at::compute_common_type_ (2 samples, 0.01%)</title><rect x="69.1" y="37" width="0.2" height="15.0" fill="rgb(219,30,15)" rx="2" ry="2" />
<text  x="72.14" y="47.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1125" width="6.7" height="15.0" fill="rgb(206,46,18)" rx="2" ry="2" />
<text  x="65.73" y="1135.5" ></text>
</g>
<g >
<title>TAlexaAgencyRating::ScoreUrl (9 samples, 0.06%)</title><rect x="437.5" y="1957" width="0.7" height="15.0" fill="rgb(209,14,32)" rx="2" ry="2" />
<text  x="440.49" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.03%)</title><rect x="686.5" y="2021" width="0.4" height="15.0" fill="rgb(212,18,49)" rx="2" ry="2" />
<text  x="689.53" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1183.8" y="1861" width="0.3" height="15.0" fill="rgb(251,108,15)" rx="2" ry="2" />
<text  x="1186.75" y="1871.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (14 samples, 0.09%)</title><rect x="1167.2" y="2053" width="1.1" height="15.0" fill="rgb(249,35,52)" rx="2" ry="2" />
<text  x="1170.15" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="439.4" y="1621" width="0.1" height="15.0" fill="rgb(253,127,8)" rx="2" ry="2" />
<text  x="442.39" y="1631.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.01%)</title><rect x="439.6" y="1957" width="0.2" height="15.0" fill="rgb(231,112,2)" rx="2" ry="2" />
<text  x="442.62" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="741" width="0.3" height="15.0" fill="rgb(226,229,21)" rx="2" ry="2" />
<text  x="1186.83" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1189" width="0.3" height="15.0" fill="rgb(232,209,2)" rx="2" ry="2" />
<text  x="1186.83" y="1199.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::(anonymous namespace)::copy_ (5 samples, 0.03%)</title><rect x="468.0" y="1909" width="0.4" height="15.0" fill="rgb(245,174,45)" rx="2" ry="2" />
<text  x="471.01" y="1919.5" ></text>
</g>
<g >
<title>at::Tensor::options (3 samples, 0.02%)</title><rect x="754.1" y="2053" width="0.3" height="15.0" fill="rgb(225,51,10)" rx="2" ry="2" />
<text  x="757.13" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1349" width="0.3" height="15.0" fill="rgb(235,194,23)" rx="2" ry="2" />
<text  x="1186.83" y="1359.5" ></text>
</g>
<g >
<title>torch::autograd::make_variable_differentiable_view (6 samples, 0.04%)</title><rect x="647.4" y="1989" width="0.5" height="15.0" fill="rgb(222,189,52)" rx="2" ry="2" />
<text  x="650.40" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1429" width="0.4" height="15.0" fill="rgb(234,157,29)" rx="2" ry="2" />
<text  x="1186.44" y="1439.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_insert_unique&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (3 samples, 0.02%)</title><rect x="438.7" y="1957" width="0.2" height="15.0" fill="rgb(235,190,15)" rx="2" ry="2" />
<text  x="441.67" y="1967.5" ></text>
</g>
<g >
<title>std::locale::locale (7 samples, 0.05%)</title><rect x="632.5" y="1941" width="0.5" height="15.0" fill="rgb(242,222,33)" rx="2" ry="2" />
<text  x="635.45" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.3" y="1957" width="0.5" height="15.0" fill="rgb(212,83,45)" rx="2" ry="2" />
<text  x="1186.28" y="1967.5" ></text>
</g>
<g >
<title>at::CPUType::mm (2 samples, 0.01%)</title><rect x="743.7" y="2005" width="0.2" height="15.0" fill="rgb(220,88,51)" rx="2" ry="2" />
<text  x="746.70" y="2015.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (1,667 samples, 11.17%)</title><rect x="868.9" y="2053" width="131.8" height="15.0" fill="rgb(241,31,1)" rx="2" ry="2" />
<text  x="871.93" y="2063.5" >fasttext::Produc..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.16%)</title><rect x="451.2" y="1797" width="1.9" height="15.0" fill="rgb(234,150,34)" rx="2" ry="2" />
<text  x="454.24" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (70 samples, 0.47%)</title><rect x="62.7" y="101" width="5.6" height="15.0" fill="rgb(230,132,38)" rx="2" ry="2" />
<text  x="65.73" y="111.5" ></text>
</g>
<g >
<title>nlohmann::detail::json_sax_dom_parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::handle_value&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (4 samples, 0.03%)</title><rect x="170.6" y="1941" width="0.3" height="15.0" fill="rgb(229,132,31)" rx="2" ry="2" />
<text  x="173.57" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="439.4" y="1749" width="0.1" height="15.0" fill="rgb(231,11,12)" rx="2" ry="2" />
<text  x="442.39" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1093" width="0.3" height="15.0" fill="rgb(206,68,19)" rx="2" ry="2" />
<text  x="1186.83" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1189" width="0.4" height="15.0" fill="rgb(243,7,7)" rx="2" ry="2" />
<text  x="1186.44" y="1199.5" ></text>
</g>
<g >
<title>c10::TensorOptions::computeDispatchKey (2 samples, 0.01%)</title><rect x="470.4" y="1893" width="0.1" height="15.0" fill="rgb(226,186,43)" rx="2" ry="2" />
<text  x="473.38" y="1903.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.01%)</title><rect x="437.3" y="1941" width="0.2" height="15.0" fill="rgb(215,228,49)" rx="2" ry="2" />
<text  x="440.33" y="1951.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (89 samples, 0.60%)</title><rect x="686.9" y="2037" width="7.1" height="15.0" fill="rgb(242,154,48)" rx="2" ry="2" />
<text  x="689.93" y="2047.5" ></text>
</g>
<g >
<title>c10::TensorOptions::computeDispatchKey (11 samples, 0.07%)</title><rect x="759.7" y="2005" width="0.9" height="15.0" fill="rgb(223,9,9)" rx="2" ry="2" />
<text  x="762.74" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="213" width="0.3" height="15.0" fill="rgb(253,39,44)" rx="2" ry="2" />
<text  x="1186.83" y="223.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1093" width="6.7" height="15.0" fill="rgb(211,144,5)" rx="2" ry="2" />
<text  x="65.73" y="1103.5" ></text>
</g>
<g >
<title>fasttext::QuantMatrix::addRowToVector (5 samples, 0.03%)</title><rect x="79.9" y="2021" width="0.4" height="15.0" fill="rgb(206,141,3)" rx="2" ry="2" />
<text  x="82.89" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1669" width="6.7" height="15.0" fill="rgb(243,53,3)" rx="2" ry="2" />
<text  x="65.73" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="773" width="0.3" height="15.0" fill="rgb(242,223,29)" rx="2" ry="2" />
<text  x="1186.83" y="783.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (11 samples, 0.07%)</title><rect x="469.2" y="1813" width="0.9" height="15.0" fill="rgb(240,140,52)" rx="2" ry="2" />
<text  x="472.19" y="1823.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::t (2 samples, 0.01%)</title><rect x="742.9" y="2037" width="0.2" height="15.0" fill="rgb(206,34,46)" rx="2" ry="2" />
<text  x="745.90" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="149" width="0.4" height="15.0" fill="rgb(237,222,11)" rx="2" ry="2" />
<text  x="1186.44" y="159.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::finalize_tokens (16 samples, 0.11%)</title><rect x="1033.3" y="2053" width="1.3" height="15.0" fill="rgb(218,37,40)" rx="2" ry="2" />
<text  x="1036.30" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.03%)</title><rect x="646.4" y="2021" width="0.4" height="15.0" fill="rgb(206,161,30)" rx="2" ry="2" />
<text  x="649.45" y="2031.5" ></text>
</g>
<g >
<title>c10::GetAllocator (2 samples, 0.01%)</title><rect x="472.6" y="1893" width="0.1" height="15.0" fill="rgb(210,139,21)" rx="2" ry="2" />
<text  x="475.59" y="1903.5" ></text>
</g>
<g >
<title>c10::TensorOptions::computeDispatchKey (3 samples, 0.02%)</title><rect x="472.1" y="1893" width="0.3" height="15.0" fill="rgb(252,217,11)" rx="2" ry="2" />
<text  x="475.12" y="1903.5" ></text>
</g>
<g >
<title>c10::TensorImpl::TensorImpl (2 samples, 0.01%)</title><rect x="638.7" y="2037" width="0.2" height="15.0" fill="rgb(206,45,40)" rx="2" ry="2" />
<text  x="641.70" y="2047.5" ></text>
</g>
<g >
<title>c10::ivalue::Object::type (2 samples, 0.01%)</title><rect x="647.2" y="1989" width="0.1" height="15.0" fill="rgb(238,41,32)" rx="2" ry="2" />
<text  x="650.16" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="452.0" y="1365" width="0.2" height="15.0" fill="rgb(213,153,48)" rx="2" ry="2" />
<text  x="455.04" y="1375.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (11 samples, 0.07%)</title><rect x="68.3" y="101" width="0.8" height="15.0" fill="rgb(237,196,12)" rx="2" ry="2" />
<text  x="71.27" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;tg::EEmbeddingKey, std::pair&lt;tg::EEmbeddingKey const, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;tg::EEmbeddingKey const, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;tg::EEmbeddingKey&gt;, std::hash&lt;tg::EEmbeddingKey&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;tg::EEmbeddingKey, std::pair&lt;tg::EEmbeddingKey const, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;tg::EEmbeddingKey const, std::vector&lt;float, std::allocator&lt;float&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;tg::EEmbeddingKey&gt;, std::hash&lt;tg::EEmbeddingKey&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_assign (2 samples, 0.01%)</title><rect x="421.1" y="1957" width="0.2" height="15.0" fill="rgb(246,162,39)" rx="2" ry="2" />
<text  x="424.12" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="439.4" y="1717" width="0.1" height="15.0" fill="rgb(212,120,53)" rx="2" ry="2" />
<text  x="442.39" y="1727.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const*, std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;*&gt; (4 samples, 0.03%)</title><rect x="446.3" y="1893" width="0.4" height="15.0" fill="rgb(213,91,28)" rx="2" ry="2" />
<text  x="449.34" y="1903.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::contiguous (2 samples, 0.01%)</title><rect x="464.5" y="1909" width="0.2" height="15.0" fill="rgb(210,197,9)" rx="2" ry="2" />
<text  x="467.53" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1701" width="6.7" height="15.0" fill="rgb(239,181,46)" rx="2" ry="2" />
<text  x="65.73" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="629" width="0.3" height="15.0" fill="rgb(205,223,20)" rx="2" ry="2" />
<text  x="1186.83" y="639.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1205" width="6.7" height="15.0" fill="rgb(215,99,3)" rx="2" ry="2" />
<text  x="65.73" y="1215.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (2 samples, 0.01%)</title><rect x="438.9" y="1957" width="0.2" height="15.0" fill="rgb(209,229,48)" rx="2" ry="2" />
<text  x="441.91" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1365" width="6.7" height="15.0" fill="rgb(227,83,9)" rx="2" ry="2" />
<text  x="65.73" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1525" width="0.3" height="15.0" fill="rgb(226,186,45)" rx="2" ry="2" />
<text  x="1186.83" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="451.6" y="1509" width="0.6" height="15.0" fill="rgb(245,123,33)" rx="2" ry="2" />
<text  x="454.64" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1477" width="0.4" height="15.0" fill="rgb(240,117,8)" rx="2" ry="2" />
<text  x="1186.44" y="1487.5" ></text>
</g>
<g >
<title>at::native::empty_cpu (2 samples, 0.01%)</title><rect x="636.5" y="2021" width="0.1" height="15.0" fill="rgb(252,83,34)" rx="2" ry="2" />
<text  x="639.49" y="2031.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (29 samples, 0.19%)</title><rect x="416.9" y="1925" width="2.2" height="15.0" fill="rgb(213,201,25)" rx="2" ry="2" />
<text  x="419.85" y="1935.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.05%)</title><rect x="732.1" y="2037" width="0.6" height="15.0" fill="rgb(236,70,47)" rx="2" ry="2" />
<text  x="735.07" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="453" width="6.7" height="15.0" fill="rgb(221,156,17)" rx="2" ry="2" />
<text  x="65.73" y="463.5" ></text>
</g>
<g >
<title>at::TensorIterator::nullary_op (6 samples, 0.04%)</title><rect x="67.8" y="53" width="0.5" height="15.0" fill="rgb(210,123,13)" rx="2" ry="2" />
<text  x="70.79" y="63.5" ></text>
</g>
<g >
<title>rocksdb::BackupableDBOptions::Dump (3 samples, 0.02%)</title><rect x="1150.6" y="2053" width="0.3" height="15.0" fill="rgb(233,74,50)" rx="2" ry="2" />
<text  x="1153.63" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="452.4" y="1397" width="0.7" height="15.0" fill="rgb(228,186,25)" rx="2" ry="2" />
<text  x="455.43" y="1407.5" ></text>
</g>
<g >
<title>TSlinkClustering::CalcDistances (201 samples, 1.35%)</title><rect x="403.3" y="1957" width="15.8" height="15.0" fill="rgb(251,138,28)" rx="2" ry="2" />
<text  x="406.25" y="1967.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (16 samples, 0.11%)</title><rect x="425.1" y="1925" width="1.2" height="15.0" fill="rgb(238,177,20)" rx="2" ry="2" />
<text  x="428.08" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1205" width="0.4" height="15.0" fill="rgb(226,141,16)" rx="2" ry="2" />
<text  x="1186.44" y="1215.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::norm_ScalarOpt_dim (2 samples, 0.01%)</title><rect x="1155.4" y="1925" width="0.1" height="15.0" fill="rgb(227,48,44)" rx="2" ry="2" />
<text  x="1158.37" y="1935.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (94 samples, 0.63%)</title><rect x="81.6" y="2021" width="7.5" height="15.0" fill="rgb(220,222,54)" rx="2" ry="2" />
<text  x="84.63" y="2031.5" ></text>
</g>
<g >
<title>rocksdb::PessimisticTransactionDB::SingleDelete (70 samples, 0.47%)</title><rect x="1151.4" y="2053" width="5.6" height="15.0" fill="rgb(247,199,28)" rx="2" ry="2" />
<text  x="1154.42" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="181" width="0.4" height="15.0" fill="rgb(209,45,51)" rx="2" ry="2" />
<text  x="1186.44" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="451.7" y="1365" width="0.2" height="15.0" fill="rgb(236,207,8)" rx="2" ry="2" />
<text  x="454.72" y="1375.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="853" width="6.7" height="15.0" fill="rgb(228,82,43)" rx="2" ry="2" />
<text  x="65.73" y="863.5" ></text>
</g>
<g >
<title>torch::autograd::VariableHooks::grad_fn (6 samples, 0.04%)</title><rect x="639.3" y="1973" width="0.4" height="15.0" fill="rgb(210,134,37)" rx="2" ry="2" />
<text  x="642.25" y="1983.5" ></text>
</g>
<g >
<title>at::native::as_strided_tensorimpl (5 samples, 0.03%)</title><rect x="640.2" y="1989" width="0.4" height="15.0" fill="rgb(253,16,18)" rx="2" ry="2" />
<text  x="643.20" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1413" width="6.7" height="15.0" fill="rgb(226,112,25)" rx="2" ry="2" />
<text  x="65.73" y="1423.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1813" width="6.7" height="15.0" fill="rgb(243,54,36)" rx="2" ry="2" />
<text  x="65.73" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="451.7" y="1013" width="0.2" height="15.0" fill="rgb(242,161,28)" rx="2" ry="2" />
<text  x="454.72" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="517" width="0.4" height="15.0" fill="rgb(218,191,38)" rx="2" ry="2" />
<text  x="1186.44" y="527.5" ></text>
</g>
<g >
<title>c10::ivalue::Object::~Object (2 samples, 0.01%)</title><rect x="649.1" y="2037" width="0.2" height="15.0" fill="rgb(210,35,17)" rx="2" ry="2" />
<text  x="652.14" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="917" width="0.3" height="15.0" fill="rgb(220,147,52)" rx="2" ry="2" />
<text  x="1186.83" y="927.5" ></text>
</g>
<g >
<title>mkl_blas_xsgemv (38 samples, 0.25%)</title><rect x="675.4" y="2037" width="3.0" height="15.0" fill="rgb(250,151,25)" rx="2" ry="2" />
<text  x="678.39" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (83 samples, 0.56%)</title><rect x="62.7" y="213" width="6.6" height="15.0" fill="rgb(210,106,14)" rx="2" ry="2" />
<text  x="65.73" y="223.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set_case (4 samples, 0.03%)</title><rect x="680.1" y="2037" width="0.3" height="15.0" fill="rgb(209,41,21)" rx="2" ry="2" />
<text  x="683.05" y="2047.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (4 samples, 0.03%)</title><rect x="435.8" y="1925" width="0.3" height="15.0" fill="rgb(222,37,3)" rx="2" ry="2" />
<text  x="438.83" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="757" width="0.4" height="15.0" fill="rgb(209,96,27)" rx="2" ry="2" />
<text  x="1186.44" y="767.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="245" width="6.7" height="15.0" fill="rgb(241,126,12)" rx="2" ry="2" />
<text  x="65.73" y="255.5" ></text>
</g>
<g >
<title>c10::TensorImpl::copy_tensor_metadata (7 samples, 0.05%)</title><rect x="644.0" y="2005" width="0.6" height="15.0" fill="rgb(216,89,47)" rx="2" ry="2" />
<text  x="647.00" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="452.4" y="1413" width="0.7" height="15.0" fill="rgb(252,196,24)" rx="2" ry="2" />
<text  x="455.43" y="1423.5" ></text>
</g>
<g >
<title>torch::autograd::VariableHooks::grad_fn (2 samples, 0.01%)</title><rect x="70.6" y="1973" width="0.1" height="15.0" fill="rgb(227,14,52)" rx="2" ry="2" />
<text  x="73.56" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="451.6" y="1717" width="0.6" height="15.0" fill="rgb(240,183,18)" rx="2" ry="2" />
<text  x="454.56" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="421" width="0.4" height="15.0" fill="rgb(213,209,15)" rx="2" ry="2" />
<text  x="1186.44" y="431.5" ></text>
</g>
<g >
<title>at::CPUType::div_Tensor (5 samples, 0.03%)</title><rect x="636.1" y="2037" width="0.4" height="15.0" fill="rgb(228,47,26)" rx="2" ry="2" />
<text  x="639.09" y="2047.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (49 samples, 0.33%)</title><rect x="91.0" y="2021" width="3.9" height="15.0" fill="rgb(220,102,30)" rx="2" ry="2" />
<text  x="94.04" y="2031.5" ></text>
</g>
<g >
<title>onmt::unicode::is_number (26 samples, 0.17%)</title><rect x="1137.0" y="2053" width="2.1" height="15.0" fill="rgb(216,155,53)" rx="2" ry="2" />
<text  x="1140.03" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1701" width="0.3" height="15.0" fill="rgb(254,220,7)" rx="2" ry="2" />
<text  x="1186.83" y="1711.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="745.3" y="2005" width="0.1" height="15.0" fill="rgb(218,99,19)" rx="2" ry="2" />
<text  x="748.28" y="2015.5" ></text>
</g>
<g >
<title>cfree (4 samples, 0.03%)</title><rect x="634.6" y="1957" width="0.3" height="15.0" fill="rgb(240,147,27)" rx="2" ry="2" />
<text  x="637.59" y="1967.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (8 samples, 0.05%)</title><rect x="693.3" y="2021" width="0.7" height="15.0" fill="rgb(249,125,32)" rx="2" ry="2" />
<text  x="696.33" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="165" width="0.3" height="15.0" fill="rgb(221,116,1)" rx="2" ry="2" />
<text  x="1186.83" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1477" width="0.3" height="15.0" fill="rgb(221,174,10)" rx="2" ry="2" />
<text  x="1186.83" y="1487.5" ></text>
</g>
<g >
<title>torch::autograd::impl::set_gradient_edge (2 samples, 0.01%)</title><rect x="742.2" y="2005" width="0.2" height="15.0" fill="rgb(210,201,43)" rx="2" ry="2" />
<text  x="745.19" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (6 samples, 0.04%)</title><rect x="639.3" y="1941" width="0.4" height="15.0" fill="rgb(214,68,18)" rx="2" ry="2" />
<text  x="642.25" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1669" width="0.3" height="15.0" fill="rgb(214,183,11)" rx="2" ry="2" />
<text  x="1186.83" y="1679.5" ></text>
</g>
<g >
<title>torch::autograd::deleteNode (2 samples, 0.01%)</title><rect x="743.2" y="2037" width="0.2" height="15.0" fill="rgb(215,130,1)" rx="2" ry="2" />
<text  x="746.22" y="2047.5" ></text>
</g>
<g >
<title>mkl_blas_avx512_xsgemv (3 samples, 0.02%)</title><rect x="674.9" y="2037" width="0.2" height="15.0" fill="rgb(233,135,39)" rx="2" ry="2" />
<text  x="677.91" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1573" width="0.3" height="15.0" fill="rgb(234,77,36)" rx="2" ry="2" />
<text  x="1186.83" y="1583.5" ></text>
</g>
<g >
<title>TDocument::FromJson (4 samples, 0.03%)</title><rect x="169.5" y="1973" width="0.4" height="15.0" fill="rgb(252,20,0)" rx="2" ry="2" />
<text  x="172.55" y="1983.5" ></text>
</g>
<g >
<title>onmt::unicode::get_lower (21 samples, 0.14%)</title><rect x="95.1" y="2021" width="1.6" height="15.0" fill="rgb(229,86,33)" rx="2" ry="2" />
<text  x="98.07" y="2031.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (5 samples, 0.03%)</title><rect x="459.9" y="1941" width="0.4" height="15.0" fill="rgb(247,35,22)" rx="2" ry="2" />
<text  x="462.86" y="1951.5" ></text>
</g>
<g >
<title>__kmp_invoke_task_func (518 samples, 3.47%)</title><rect x="127.8" y="2037" width="41.0" height="15.0" fill="rgb(220,142,49)" rx="2" ry="2" />
<text  x="130.80" y="2047.5" >__k..</text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="293" width="6.7" height="15.0" fill="rgb(253,108,10)" rx="2" ry="2" />
<text  x="65.73" y="303.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1621" width="6.7" height="15.0" fill="rgb(214,64,22)" rx="2" ry="2" />
<text  x="65.73" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="451.7" y="965" width="0.2" height="15.0" fill="rgb(234,188,51)" rx="2" ry="2" />
<text  x="454.72" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1125" width="0.4" height="15.0" fill="rgb(225,51,34)" rx="2" ry="2" />
<text  x="1186.44" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="661" width="0.4" height="15.0" fill="rgb(216,164,36)" rx="2" ry="2" />
<text  x="1186.44" y="671.5" ></text>
</g>
<g >
<title>at::TensorIterator::build (2 samples, 0.01%)</title><rect x="69.1" y="69" width="0.2" height="15.0" fill="rgb(239,28,16)" rx="2" ry="2" />
<text  x="72.14" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::construct&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const&amp;&gt; (4 samples, 0.03%)</title><rect x="446.3" y="1989" width="0.4" height="15.0" fill="rgb(240,187,30)" rx="2" ry="2" />
<text  x="449.34" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.3" y="1909" width="0.5" height="15.0" fill="rgb(236,130,27)" rx="2" ry="2" />
<text  x="1186.28" y="1919.5" ></text>
</g>
<g >
<title>c10::detail::make_boxed_from_unboxed_functor&lt;c10::detail::WrapKernelFunction_&lt;long  (2 samples, 0.01%)</title><rect x="757.1" y="2037" width="0.2" height="15.0" fill="rgb(237,146,48)" rx="2" ry="2" />
<text  x="760.14" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1183.8" y="2021" width="0.3" height="15.0" fill="rgb(251,134,38)" rx="2" ry="2" />
<text  x="1186.75" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="565" width="6.7" height="15.0" fill="rgb(239,141,45)" rx="2" ry="2" />
<text  x="65.73" y="575.5" ></text>
</g>
<g >
<title>c10::TensorImpl::TensorImpl (2 samples, 0.01%)</title><rect x="69.8" y="1973" width="0.1" height="15.0" fill="rgb(217,29,37)" rx="2" ry="2" />
<text  x="72.77" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1685" width="0.3" height="15.0" fill="rgb(245,71,21)" rx="2" ry="2" />
<text  x="1186.83" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.07%)</title><rect x="452.4" y="1557" width="0.7" height="15.0" fill="rgb(207,20,13)" rx="2" ry="2" />
<text  x="455.35" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="357" width="0.4" height="15.0" fill="rgb(215,36,18)" rx="2" ry="2" />
<text  x="1186.44" y="367.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_float (2 samples, 0.01%)</title><rect x="442.5" y="1925" width="0.2" height="15.0" fill="rgb(212,39,17)" rx="2" ry="2" />
<text  x="445.55" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="453.0" y="1045" width="0.1" height="15.0" fill="rgb(239,151,26)" rx="2" ry="2" />
<text  x="455.98" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="677" width="0.4" height="15.0" fill="rgb(243,120,23)" rx="2" ry="2" />
<text  x="1186.44" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (3 samples, 0.02%)</title><rect x="738.0" y="2005" width="0.2" height="15.0" fill="rgb(229,175,39)" rx="2" ry="2" />
<text  x="741.00" y="2015.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (4 samples, 0.03%)</title><rect x="446.3" y="1973" width="0.4" height="15.0" fill="rgb(229,194,15)" rx="2" ry="2" />
<text  x="449.34" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1317" width="0.3" height="15.0" fill="rgb(212,180,14)" rx="2" ry="2" />
<text  x="1186.83" y="1327.5" ></text>
</g>
<g >
<title>at::native::empty_cpu (2 samples, 0.01%)</title><rect x="760.8" y="2005" width="0.1" height="15.0" fill="rgb(208,106,34)" rx="2" ry="2" />
<text  x="763.77" y="2015.5" ></text>
</g>
<g >
<title>c10::GetCPUAllocator@plt (2 samples, 0.01%)</title><rect x="761.1" y="2005" width="0.1" height="15.0" fill="rgb(234,181,39)" rx="2" ry="2" />
<text  x="764.09" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="451.6" y="1541" width="0.6" height="15.0" fill="rgb(235,45,7)" rx="2" ry="2" />
<text  x="454.64" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25 samples, 0.17%)</title><rect x="451.2" y="1893" width="1.9" height="15.0" fill="rgb(251,62,38)" rx="2" ry="2" />
<text  x="454.17" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.16%)</title><rect x="451.2" y="1765" width="1.9" height="15.0" fill="rgb(235,57,52)" rx="2" ry="2" />
<text  x="454.24" y="1775.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (9 samples, 0.06%)</title><rect x="74.0" y="2005" width="0.7" height="15.0" fill="rgb(234,112,0)" rx="2" ry="2" />
<text  x="76.96" y="2015.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (13 samples, 0.09%)</title><rect x="78.9" y="2021" width="1.0" height="15.0" fill="rgb(205,109,32)" rx="2" ry="2" />
<text  x="81.86" y="2031.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (2 samples, 0.01%)</title><rect x="73.8" y="2005" width="0.2" height="15.0" fill="rgb(250,205,43)" rx="2" ry="2" />
<text  x="76.80" y="2015.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (5 samples, 0.03%)</title><rect x="174.6" y="1925" width="0.4" height="15.0" fill="rgb(217,37,45)" rx="2" ry="2" />
<text  x="177.61" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1397" width="6.7" height="15.0" fill="rgb(247,62,46)" rx="2" ry="2" />
<text  x="65.73" y="1407.5" ></text>
</g>
<g >
<title>at::TensorIterator::reorder_dimensions (2 samples, 0.01%)</title><rect x="1189.8" y="2037" width="0.2" height="15.0" fill="rgb(247,121,20)" rx="2" ry="2" />
<text  x="1192.84" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.07%)</title><rect x="452.3" y="1701" width="0.8" height="15.0" fill="rgb(246,143,21)" rx="2" ry="2" />
<text  x="455.27" y="1711.5" ></text>
</g>
<g >
<title>at::CPUType::add_Tensor (3 samples, 0.02%)</title><rect x="1154.3" y="1909" width="0.2" height="15.0" fill="rgb(222,6,37)" rx="2" ry="2" />
<text  x="1157.26" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (7 samples, 0.05%)</title><rect x="744.4" y="2021" width="0.6" height="15.0" fill="rgb(218,183,12)" rx="2" ry="2" />
<text  x="747.41" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1029" width="6.7" height="15.0" fill="rgb(229,226,18)" rx="2" ry="2" />
<text  x="65.73" y="1039.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (2 samples, 0.01%)</title><rect x="94.9" y="2021" width="0.2" height="15.0" fill="rgb(252,117,14)" rx="2" ry="2" />
<text  x="97.91" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="451.7" y="933" width="0.2" height="15.0" fill="rgb(234,29,1)" rx="2" ry="2" />
<text  x="454.72" y="943.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="633.9" y="1941" width="0.1" height="15.0" fill="rgb(254,139,52)" rx="2" ry="2" />
<text  x="636.88" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1183.8" y="1893" width="0.3" height="15.0" fill="rgb(238,215,11)" rx="2" ry="2" />
<text  x="1186.75" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1183.4" y="1733" width="0.4" height="15.0" fill="rgb(252,13,26)" rx="2" ry="2" />
<text  x="1186.36" y="1743.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::str[abi:cxx11] (3 samples, 0.02%)</title><rect x="680.4" y="2037" width="0.2" height="15.0" fill="rgb(254,26,48)" rx="2" ry="2" />
<text  x="683.37" y="2047.5" ></text>
</g>
<g >
<title>TAlexaAgencyRating::GetCountryShare (3 samples, 0.02%)</title><rect x="437.3" y="1957" width="0.2" height="15.0" fill="rgb(214,47,3)" rx="2" ry="2" />
<text  x="440.25" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="451.7" y="1381" width="0.2" height="15.0" fill="rgb(246,40,8)" rx="2" ry="2" />
<text  x="454.72" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="439.3" y="1813" width="0.2" height="15.0" fill="rgb(248,118,3)" rx="2" ry="2" />
<text  x="442.31" y="1823.5" ></text>
</g>
<g >
<title>Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;float, float&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_quotient_op&lt;float, float&gt;, Eigen::CwiseUnaryOp&lt;Eigen::internal::scalar_opposite_op&lt;float&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::ArrayWrapper&lt;Eigen::Product&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;, 0&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt; const, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Array&lt;float, -1, -1, 0, -1, -1&gt; const&gt; const&gt;, Eigen::internal::assign_op&lt;float, float&gt; &gt; (104 samples, 0.70%)</title><rect x="410.9" y="1941" width="8.2" height="15.0" fill="rgb(244,154,8)" rx="2" ry="2" />
<text  x="413.92" y="1951.5" ></text>
</g>
<g >
<title>TSummarizer::Summarize (229 samples, 1.53%)</title><rect x="422.0" y="2005" width="18.1" height="15.0" fill="rgb(210,226,32)" rx="2" ry="2" />
<text  x="424.99" y="2015.5" ></text>
</g>
<g >
<title>c10::Dispatcher::callUnboxed&lt;at::Tensor, at::Tensor const&amp;, at::Tensor const&amp;&gt; (2 samples, 0.01%)</title><rect x="756.5" y="2053" width="0.2" height="15.0" fill="rgb(245,32,28)" rx="2" ry="2" />
<text  x="759.50" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="437" width="0.4" height="15.0" fill="rgb(228,78,50)" rx="2" ry="2" />
<text  x="1186.44" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="325" width="0.3" height="15.0" fill="rgb(213,201,16)" rx="2" ry="2" />
<text  x="1186.83" y="335.5" ></text>
</g>
<g >
<title>c10::TensorImpl::size (2 samples, 0.01%)</title><rect x="757.3" y="2053" width="0.2" height="15.0" fill="rgb(237,178,27)" rx="2" ry="2" />
<text  x="760.29" y="2063.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;TThreadPool::TThreadPool (7 samples, 0.05%)</title><rect x="50.6" y="2037" width="0.6" height="15.0" fill="rgb(250,140,13)" rx="2" ry="2" />
<text  x="53.64" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="725" width="0.4" height="15.0" fill="rgb(234,130,12)" rx="2" ry="2" />
<text  x="1186.44" y="735.5" ></text>
</g>
<g >
<title>torch::autograd::Node::get_next_sequence_nr (2 samples, 0.01%)</title><rect x="742.4" y="2037" width="0.1" height="15.0" fill="rgb(211,6,42)" rx="2" ry="2" />
<text  x="745.35" y="2047.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (10 samples, 0.07%)</title><rect x="738.3" y="2005" width="0.8" height="15.0" fill="rgb(212,57,21)" rx="2" ry="2" />
<text  x="741.32" y="2015.5" ></text>
</g>
<g >
<title>at::native::norm (4 samples, 0.03%)</title><rect x="1154.6" y="1909" width="0.3" height="15.0" fill="rgb(211,62,49)" rx="2" ry="2" />
<text  x="1157.58" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1183.8" y="1877" width="0.3" height="15.0" fill="rgb(237,11,13)" rx="2" ry="2" />
<text  x="1186.75" y="1887.5" ></text>
</g>
<g >
<title>at::TensorIterator::build (6 samples, 0.04%)</title><rect x="755.9" y="2005" width="0.4" height="15.0" fill="rgb(229,50,36)" rx="2" ry="2" />
<text  x="758.87" y="2015.5" ></text>
</g>
<g >
<title>c10::KernelFunction::getFunctor_ (2 samples, 0.01%)</title><rect x="761.5" y="2021" width="0.1" height="15.0" fill="rgb(205,224,8)" rx="2" ry="2" />
<text  x="764.48" y="2031.5" ></text>
</g>
<g >
<title>std::locale::~locale (2 samples, 0.01%)</title><rect x="450.5" y="1941" width="0.1" height="15.0" fill="rgb(222,137,51)" rx="2" ry="2" />
<text  x="453.45" y="1951.5" ></text>
</g>
<g >
<title>std::__stable_sort_adaptive&lt;__gnu_cxx::__normal_iterator&lt;TDbDocument*, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, TDbDocument*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (13 samples, 0.09%)</title><rect x="419.9" y="1989" width="1.0" height="15.0" fill="rgb(220,137,2)" rx="2" ry="2" />
<text  x="422.86" y="1999.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2 samples, 0.01%)</title><rect x="1168.3" y="2053" width="0.1" height="15.0" fill="rgb(227,54,13)" rx="2" ry="2" />
<text  x="1171.26" y="2063.5" ></text>
</g>
<g >
<title>cfree (11 samples, 0.07%)</title><rect x="474.7" y="1941" width="0.9" height="15.0" fill="rgb(228,132,40)" rx="2" ry="2" />
<text  x="477.73" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1333" width="6.7" height="15.0" fill="rgb(216,102,49)" rx="2" ry="2" />
<text  x="65.73" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="469" width="0.4" height="15.0" fill="rgb(245,18,22)" rx="2" ry="2" />
<text  x="1186.44" y="479.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::scan (7 samples, 0.05%)</title><rect x="171.6" y="1941" width="0.6" height="15.0" fill="rgb(223,129,46)" rx="2" ry="2" />
<text  x="174.60" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1183.8" y="37" width="0.2" height="15.0" fill="rgb(220,91,24)" rx="2" ry="2" />
<text  x="1186.83" y="47.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1829" width="6.7" height="15.0" fill="rgb(206,183,28)" rx="2" ry="2" />
<text  x="65.73" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="469" width="0.3" height="15.0" fill="rgb(219,168,2)" rx="2" ry="2" />
<text  x="1186.83" y="479.5" ></text>
</g>
<g >
<title>c10::IValue::type (2 samples, 0.01%)</title><rect x="638.1" y="2037" width="0.1" height="15.0" fill="rgb(242,227,3)" rx="2" ry="2" />
<text  x="641.07" y="2047.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (3 samples, 0.02%)</title><rect x="445.3" y="1973" width="0.3" height="15.0" fill="rgb(206,75,28)" rx="2" ry="2" />
<text  x="448.32" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1029" width="0.3" height="15.0" fill="rgb(234,114,10)" rx="2" ry="2" />
<text  x="1186.83" y="1039.5" ></text>
</g>
<g >
<title>at::native::setStrided (5 samples, 0.03%)</title><rect x="640.2" y="1973" width="0.4" height="15.0" fill="rgb(221,54,53)" rx="2" ry="2" />
<text  x="643.20" y="1983.5" ></text>
</g>
<g >
<title>cfree (116 samples, 0.78%)</title><rect x="762.0" y="2053" width="9.1" height="15.0" fill="rgb(246,229,30)" rx="2" ry="2" />
<text  x="764.96" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1183.8" y="1941" width="0.3" height="15.0" fill="rgb(220,84,42)" rx="2" ry="2" />
<text  x="1186.75" y="1951.5" ></text>
</g>
<g >
<title>c10::TensorOptions::computeDispatchKey (6 samples, 0.04%)</title><rect x="759.0" y="2005" width="0.4" height="15.0" fill="rgb(246,223,16)" rx="2" ry="2" />
<text  x="761.95" y="2015.5" ></text>
</g>
<g >
<title>fasttext::Loss::findKBest (2 samples, 0.01%)</title><rect x="868.8" y="2053" width="0.1" height="15.0" fill="rgb(215,206,5)" rx="2" ry="2" />
<text  x="871.77" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1189" width="6.7" height="15.0" fill="rgb(214,153,19)" rx="2" ry="2" />
<text  x="65.73" y="1199.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (2 samples, 0.01%)</title><rect x="69.1" y="117" width="0.2" height="15.0" fill="rgb(210,151,44)" rx="2" ry="2" />
<text  x="72.14" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find@plt (4 samples, 0.03%)</title><rect x="734.4" y="2037" width="0.3" height="15.0" fill="rgb(207,131,49)" rx="2" ry="2" />
<text  x="737.37" y="2047.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="745.6" y="2037" width="0.2" height="15.0" fill="rgb(232,228,24)" rx="2" ry="2" />
<text  x="748.59" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (12 samples, 0.08%)</title><rect x="733.4" y="2037" width="1.0" height="15.0" fill="rgb(253,4,19)" rx="2" ry="2" />
<text  x="736.42" y="2047.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::slice_Tensor (9 samples, 0.06%)</title><rect x="466.4" y="1893" width="0.7" height="15.0" fill="rgb(219,91,34)" rx="2" ry="2" />
<text  x="469.42" y="1903.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::get_centroids (18 samples, 0.12%)</title><rect x="1000.7" y="2053" width="1.4" height="15.0" fill="rgb(225,178,36)" rx="2" ry="2" />
<text  x="1003.73" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="805" width="6.7" height="15.0" fill="rgb(210,52,12)" rx="2" ry="2" />
<text  x="65.73" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (47 samples, 0.31%)</title><rect x="456.1" y="1925" width="3.8" height="15.0" fill="rgb(210,0,9)" rx="2" ry="2" />
<text  x="459.15" y="1935.5" ></text>
</g>
<g >
<title>at::TensorIterator::compute_types (2 samples, 0.01%)</title><rect x="69.1" y="53" width="0.2" height="15.0" fill="rgb(251,32,11)" rx="2" ry="2" />
<text  x="72.14" y="63.5" ></text>
</g>
<g >
<title>memcpy@plt (2 samples, 0.01%)</title><rect x="81.5" y="2021" width="0.1" height="15.0" fill="rgb(213,14,42)" rx="2" ry="2" />
<text  x="84.47" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="229" width="0.3" height="15.0" fill="rgb(239,103,24)" rx="2" ry="2" />
<text  x="1186.83" y="239.5" ></text>
</g>
<g >
<title>at::TensorIterator::data_ptr (2 samples, 0.01%)</title><rect x="754.4" y="2053" width="0.2" height="15.0" fill="rgb(205,93,13)" rx="2" ry="2" />
<text  x="757.45" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (5 samples, 0.03%)</title><rect x="439.2" y="1941" width="0.4" height="15.0" fill="rgb(216,216,9)" rx="2" ry="2" />
<text  x="442.23" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="757" width="0.3" height="15.0" fill="rgb(245,182,15)" rx="2" ry="2" />
<text  x="1186.83" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="451.6" y="1477" width="0.6" height="15.0" fill="rgb(254,189,17)" rx="2" ry="2" />
<text  x="454.64" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="451.7" y="1141" width="0.2" height="15.0" fill="rgb(247,31,18)" rx="2" ry="2" />
<text  x="454.72" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (891 samples, 5.97%)</title><rect x="57.0" y="2037" width="70.5" height="15.0" fill="rgb(250,205,30)" rx="2" ry="2" />
<text  x="60.04" y="2047.5" >[unknown]</text>
</g>
<g >
<title>c10::Dispatcher::singleton (2 samples, 0.01%)</title><rect x="467.5" y="1925" width="0.2" height="15.0" fill="rgb(217,6,3)" rx="2" ry="2" />
<text  x="470.53" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="933" width="0.4" height="15.0" fill="rgb(230,153,22)" rx="2" ry="2" />
<text  x="1186.44" y="943.5" ></text>
</g>
<g >
<title>torch::autograd::DifferentiableViewMeta::DifferentiableViewMeta (2 samples, 0.01%)</title><rect x="647.4" y="1973" width="0.2" height="15.0" fill="rgb(216,61,2)" rx="2" ry="2" />
<text  x="650.40" y="1983.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::add (32 samples, 0.21%)</title><rect x="175.0" y="1925" width="2.5" height="15.0" fill="rgb(225,39,14)" rx="2" ry="2" />
<text  x="178.00" y="1935.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_get_insert_unique_pos (4 samples, 0.03%)</title><rect x="433.8" y="1925" width="0.3" height="15.0" fill="rgb(205,124,32)" rx="2" ry="2" />
<text  x="436.77" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="357" width="0.3" height="15.0" fill="rgb(240,47,51)" rx="2" ry="2" />
<text  x="1186.83" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="437" width="0.3" height="15.0" fill="rgb(250,151,8)" rx="2" ry="2" />
<text  x="1186.83" y="447.5" ></text>
</g>
<g >
<title>fasttext::Vector::norm (124 samples, 0.83%)</title><rect x="621.9" y="1941" width="9.8" height="15.0" fill="rgb(212,177,28)" rx="2" ry="2" />
<text  x="624.94" y="1951.5" ></text>
</g>
<g >
<title>std::_Sp_counted_deleter&lt;torch::autograd::generated::NormBackward1*, void  (2 samples, 0.01%)</title><rect x="733.1" y="2037" width="0.2" height="15.0" fill="rgb(223,48,16)" rx="2" ry="2" />
<text  x="736.10" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (83 samples, 0.56%)</title><rect x="62.7" y="197" width="6.6" height="15.0" fill="rgb(214,70,13)" rx="2" ry="2" />
<text  x="65.73" y="207.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0, 1&gt;::run (518 samples, 3.47%)</title><rect x="127.8" y="1989" width="41.0" height="15.0" fill="rgb(219,14,4)" rx="2" ry="2" />
<text  x="130.80" y="1999.5" >Eig..</text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (7 samples, 0.05%)</title><rect x="772.4" y="2053" width="0.5" height="15.0" fill="rgb(241,127,8)" rx="2" ry="2" />
<text  x="775.39" y="2063.5" ></text>
</g>
<g >
<title>fasttext::QuantMatrix::addRowToVector (77 samples, 0.52%)</title><rect x="1002.1" y="2053" width="6.1" height="15.0" fill="rgb(243,152,35)" rx="2" ry="2" />
<text  x="1005.15" y="2063.5" ></text>
</g>
<g >
<title>c10::TensorType::isSubtypeOfExt (4 samples, 0.03%)</title><rect x="646.4" y="2037" width="0.4" height="15.0" fill="rgb(219,45,12)" rx="2" ry="2" />
<text  x="649.45" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (4 samples, 0.03%)</title><rect x="683.0" y="2021" width="0.3" height="15.0" fill="rgb(218,63,16)" rx="2" ry="2" />
<text  x="685.98" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;::_M_insert_aux&lt;c10::IValue&gt; (2 samples, 0.01%)</title><rect x="1187.3" y="2053" width="0.2" height="15.0" fill="rgb(240,193,13)" rx="2" ry="2" />
<text  x="1190.31" y="2063.5" ></text>
</g>
<g >
<title>tgnews (14,925 samples, 100.00%)</title><rect x="10.0" y="2069" width="1180.0" height="15.0" fill="rgb(247,164,46)" rx="2" ry="2" />
<text  x="13.00" y="2079.5" >tgnews</text>
</g>
<g >
<title>at::TensorIterator::compute_shape (2 samples, 0.01%)</title><rect x="755.9" y="1989" width="0.2" height="15.0" fill="rgb(233,151,6)" rx="2" ry="2" />
<text  x="758.95" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="341" width="0.4" height="15.0" fill="rgb(216,140,6)" rx="2" ry="2" />
<text  x="1186.44" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.3" y="1893" width="0.5" height="15.0" fill="rgb(234,138,47)" rx="2" ry="2" />
<text  x="1186.28" y="1903.5" ></text>
</g>
<g >
<title>c10::FunctionSchema::checkAndNormalizeInputs (11 samples, 0.07%)</title><rect x="1151.8" y="1989" width="0.9" height="15.0" fill="rgb(240,59,52)" rx="2" ry="2" />
<text  x="1154.81" y="1999.5" ></text>
</g>
<g >
<title>main (3,514 samples, 23.54%)</title><rect x="168.8" y="2021" width="277.9" height="15.0" fill="rgb(243,169,0)" rx="2" ry="2" />
<text  x="171.84" y="2031.5" >main</text>
</g>
<g >
<title>std::packaged_task&lt;std::optional&lt;TDbDocument&gt;  (2 samples, 0.01%)</title><rect x="50.9" y="2005" width="0.1" height="15.0" fill="rgb(232,66,37)" rx="2" ry="2" />
<text  x="53.88" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="439.3" y="1861" width="0.2" height="15.0" fill="rgb(237,186,35)" rx="2" ry="2" />
<text  x="442.31" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="549" width="0.3" height="15.0" fill="rgb(215,106,35)" rx="2" ry="2" />
<text  x="1186.83" y="559.5" ></text>
</g>
<g >
<title>c10::Dispatcher::callUnboxedWithDispatchKey&lt;long, at::Tensor const&amp;, long&gt; (2 samples, 0.01%)</title><rect x="67.0" y="37" width="0.2" height="15.0" fill="rgb(235,205,42)" rx="2" ry="2" />
<text  x="70.00" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="485" width="0.3" height="15.0" fill="rgb(248,122,28)" rx="2" ry="2" />
<text  x="1186.83" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1045" width="0.4" height="15.0" fill="rgb(220,172,38)" rx="2" ry="2" />
<text  x="1186.44" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1183.4" y="1845" width="0.4" height="15.0" fill="rgb(212,216,53)" rx="2" ry="2" />
<text  x="1186.36" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1183.5" y="37" width="0.3" height="15.0" fill="rgb(241,82,21)" rx="2" ry="2" />
<text  x="1186.52" y="47.5" ></text>
</g>
<g >
<title>[unknown] (49 samples, 0.33%)</title><rect x="639.3" y="2005" width="3.8" height="15.0" fill="rgb(223,176,6)" rx="2" ry="2" />
<text  x="642.25" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25 samples, 0.17%)</title><rect x="451.2" y="1829" width="1.9" height="15.0" fill="rgb(228,64,10)" rx="2" ry="2" />
<text  x="454.17" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.3" y="2005" width="0.5" height="15.0" fill="rgb(212,176,47)" rx="2" ry="2" />
<text  x="1186.28" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1941" width="6.7" height="15.0" fill="rgb(244,65,8)" rx="2" ry="2" />
<text  x="65.73" y="1951.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.01%)</title><rect x="432.0" y="1941" width="0.2" height="15.0" fill="rgb(212,123,34)" rx="2" ry="2" />
<text  x="435.03" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1685" width="0.4" height="15.0" fill="rgb(219,52,47)" rx="2" ry="2" />
<text  x="1186.44" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="213" width="0.4" height="15.0" fill="rgb(224,33,18)" rx="2" ry="2" />
<text  x="1186.44" y="223.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1605" width="6.7" height="15.0" fill="rgb(252,201,10)" rx="2" ry="2" />
<text  x="65.73" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="101" width="0.4" height="15.0" fill="rgb(223,120,0)" rx="2" ry="2" />
<text  x="1186.44" y="111.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (18 samples, 0.12%)</title><rect x="49.8" y="2053" width="1.4" height="15.0" fill="rgb(232,128,21)" rx="2" ry="2" />
<text  x="52.77" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1183.8" y="1733" width="0.3" height="15.0" fill="rgb(210,121,52)" rx="2" ry="2" />
<text  x="1186.75" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="451.7" y="1301" width="0.2" height="15.0" fill="rgb(223,13,42)" rx="2" ry="2" />
<text  x="454.72" y="1311.5" ></text>
</g>
<g >
<title>at::native::DispatchStub&lt;void  (2 samples, 0.01%)</title><rect x="69.0" y="53" width="0.1" height="15.0" fill="rgb(223,227,48)" rx="2" ry="2" />
<text  x="71.98" y="63.5" ></text>
</g>
<g >
<title>onmt::unicode::get_case (55 samples, 0.37%)</title><rect x="1079.7" y="2053" width="4.4" height="15.0" fill="rgb(253,225,29)" rx="2" ry="2" />
<text  x="1082.71" y="2063.5" ></text>
</g>
<g >
<title>cfree (17 samples, 0.11%)</title><rect x="649.3" y="2037" width="1.3" height="15.0" fill="rgb(236,11,49)" rx="2" ry="2" />
<text  x="652.30" y="2047.5" ></text>
</g>
<g >
<title>std::__move_merge&lt;TDbDocument*, __gnu_cxx::__normal_iterator&lt;TDbDocument*, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (7 samples, 0.05%)</title><rect x="420.2" y="1957" width="0.5" height="15.0" fill="rgb(216,209,7)" rx="2" ry="2" />
<text  x="423.17" y="1967.5" ></text>
</g>
<g >
<title>at::TensorIterator::reduce_op (7 samples, 0.05%)</title><rect x="755.8" y="2021" width="0.5" height="15.0" fill="rgb(246,94,12)" rx="2" ry="2" />
<text  x="758.79" y="2031.5" ></text>
</g>
<g >
<title>at::native::copy_impl (7 samples, 0.05%)</title><rect x="755.0" y="2037" width="0.6" height="15.0" fill="rgb(228,78,46)" rx="2" ry="2" />
<text  x="758.00" y="2047.5" ></text>
</g>
<g >
<title>GetHost (29 samples, 0.19%)</title><rect x="450.9" y="1957" width="2.3" height="15.0" fill="rgb(254,5,30)" rx="2" ry="2" />
<text  x="453.93" y="1967.5" ></text>
</g>
<g >
<title>torch::jit::(anonymous namespace)::{lambda (5 samples, 0.03%)</title><rect x="1155.9" y="1941" width="0.4" height="15.0" fill="rgb(213,47,0)" rx="2" ry="2" />
<text  x="1158.92" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1157" width="0.3" height="15.0" fill="rgb(252,195,53)" rx="2" ry="2" />
<text  x="1186.83" y="1167.5" ></text>
</g>
<g >
<title>c10::TensorImpl::TensorImpl (2 samples, 0.01%)</title><rect x="643.7" y="1989" width="0.1" height="15.0" fill="rgb(224,216,37)" rx="2" ry="2" />
<text  x="646.68" y="1999.5" ></text>
</g>
<g >
<title>TEmbedder::CalcEmbedding (2,197 samples, 14.72%)</title><rect x="460.5" y="1957" width="173.7" height="15.0" fill="rgb(237,149,51)" rx="2" ry="2" />
<text  x="463.50" y="1967.5" >TEmbedder::CalcEmbedding</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1509" width="0.3" height="15.0" fill="rgb(248,155,52)" rx="2" ry="2" />
<text  x="1186.83" y="1519.5" ></text>
</g>
<g >
<title>[unknown] (83 samples, 0.56%)</title><rect x="62.7" y="181" width="6.6" height="15.0" fill="rgb(230,84,26)" rx="2" ry="2" />
<text  x="65.73" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (12 samples, 0.08%)</title><rect x="452.2" y="1749" width="0.9" height="15.0" fill="rgb(240,203,2)" rx="2" ry="2" />
<text  x="455.19" y="1759.5" ></text>
</g>
<g >
<title>__tls_get_addr (2 samples, 0.01%)</title><rect x="464.0" y="1925" width="0.1" height="15.0" fill="rgb(233,136,38)" rx="2" ry="2" />
<text  x="466.97" y="1935.5" ></text>
</g>
<g >
<title>torch::autograd::VariableHooks::is_view (2 samples, 0.01%)</title><rect x="466.7" y="1877" width="0.2" height="15.0" fill="rgb(244,114,3)" rx="2" ry="2" />
<text  x="469.74" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="885" width="0.4" height="15.0" fill="rgb(223,216,17)" rx="2" ry="2" />
<text  x="1186.44" y="895.5" ></text>
</g>
<g >
<title>at::native::add (2 samples, 0.01%)</title><rect x="1154.3" y="1893" width="0.2" height="15.0" fill="rgb(239,116,54)" rx="2" ry="2" />
<text  x="1157.34" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1237" width="6.7" height="15.0" fill="rgb(218,78,8)" rx="2" ry="2" />
<text  x="65.73" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (10 samples, 0.07%)</title><rect x="452.4" y="1605" width="0.7" height="15.0" fill="rgb(248,116,3)" rx="2" ry="2" />
<text  x="455.35" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="451.6" y="1701" width="0.6" height="15.0" fill="rgb(252,166,47)" rx="2" ry="2" />
<text  x="454.56" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="437" width="6.7" height="15.0" fill="rgb(205,90,18)" rx="2" ry="2" />
<text  x="65.73" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="501" width="0.4" height="15.0" fill="rgb(242,40,28)" rx="2" ry="2" />
<text  x="1186.44" y="511.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_escaped (4 samples, 0.03%)</title><rect x="442.2" y="1925" width="0.3" height="15.0" fill="rgb(248,136,9)" rx="2" ry="2" />
<text  x="445.23" y="1935.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (2 samples, 0.01%)</title><rect x="446.5" y="1829" width="0.2" height="15.0" fill="rgb(234,147,31)" rx="2" ry="2" />
<text  x="449.50" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1269" width="0.4" height="15.0" fill="rgb(211,212,11)" rx="2" ry="2" />
<text  x="1186.44" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="885" width="0.3" height="15.0" fill="rgb(217,13,40)" rx="2" ry="2" />
<text  x="1186.83" y="895.5" ></text>
</g>
<g >
<title>TFastTextEmbedder::CalcEmbedding (150 samples, 1.01%)</title><rect x="460.5" y="1941" width="11.9" height="15.0" fill="rgb(215,47,3)" rx="2" ry="2" />
<text  x="463.50" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="677" width="0.3" height="15.0" fill="rgb(251,214,49)" rx="2" ry="2" />
<text  x="1186.83" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="997" width="0.3" height="15.0" fill="rgb(245,7,9)" rx="2" ry="2" />
<text  x="1186.83" y="1007.5" ></text>
</g>
<g >
<title>c10::impl::ExcludeDispatchKeyGuard::ExcludeDispatchKeyGuard (3 samples, 0.02%)</title><rect x="76.2" y="2021" width="0.2" height="15.0" fill="rgb(225,37,35)" rx="2" ry="2" />
<text  x="79.17" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="501" width="6.7" height="15.0" fill="rgb(218,222,2)" rx="2" ry="2" />
<text  x="65.73" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="452.8" y="1253" width="0.3" height="15.0" fill="rgb(236,172,31)" rx="2" ry="2" />
<text  x="455.83" y="1263.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_float (4 samples, 0.03%)</title><rect x="441.9" y="1909" width="0.3" height="15.0" fill="rgb(227,49,34)" rx="2" ry="2" />
<text  x="444.92" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="773" width="0.4" height="15.0" fill="rgb(215,172,27)" rx="2" ry="2" />
<text  x="1186.44" y="783.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="442.1" y="1893" width="0.1" height="15.0" fill="rgb(253,102,22)" rx="2" ry="2" />
<text  x="445.07" y="1903.5" ></text>
</g>
<g >
<title>c10::function_ref&lt;void  (8 samples, 0.05%)</title><rect x="757.8" y="2053" width="0.6" height="15.0" fill="rgb(218,116,39)" rx="2" ry="2" />
<text  x="760.77" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (6 samples, 0.04%)</title><rect x="472.6" y="1925" width="0.5" height="15.0" fill="rgb(205,111,23)" rx="2" ry="2" />
<text  x="475.59" y="1935.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (15 samples, 0.10%)</title><rect x="72.2" y="2005" width="1.2" height="15.0" fill="rgb(248,207,44)" rx="2" ry="2" />
<text  x="75.22" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="693" width="0.4" height="15.0" fill="rgb(221,197,45)" rx="2" ry="2" />
<text  x="1186.44" y="703.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned_base::_M_futex_wait_until (2 samples, 0.01%)</title><rect x="182.6" y="1973" width="0.2" height="15.0" fill="rgb(220,32,4)" rx="2" ry="2" />
<text  x="185.59" y="1983.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (4 samples, 0.03%)</title><rect x="58.5" y="1989" width="0.3" height="15.0" fill="rgb(215,108,2)" rx="2" ry="2" />
<text  x="61.46" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1605" width="0.3" height="15.0" fill="rgb(219,201,16)" rx="2" ry="2" />
<text  x="1186.83" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="869" width="0.3" height="15.0" fill="rgb(242,212,26)" rx="2" ry="2" />
<text  x="1186.83" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="805" width="0.3" height="15.0" fill="rgb(219,112,48)" rx="2" ry="2" />
<text  x="1186.83" y="815.5" ></text>
</g>
<g >
<title>[unknown] (83 samples, 0.56%)</title><rect x="62.7" y="165" width="6.6" height="15.0" fill="rgb(241,22,6)" rx="2" ry="2" />
<text  x="65.73" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="373" width="0.3" height="15.0" fill="rgb(232,196,48)" rx="2" ry="2" />
<text  x="1186.83" y="383.5" ></text>
</g>
<g >
<title>caffe2::TypeMeta::_typeMetaDataInstance&lt;int&gt;@plt (2 samples, 0.01%)</title><rect x="760.0" y="1989" width="0.1" height="15.0" fill="rgb(207,88,22)" rx="2" ry="2" />
<text  x="762.98" y="1999.5" ></text>
</g>
<g >
<title>c10::TensorImpl::~TensorImpl (95 samples, 0.64%)</title><rect x="638.9" y="2037" width="7.5" height="15.0" fill="rgb(239,16,37)" rx="2" ry="2" />
<text  x="641.94" y="2047.5" ></text>
</g>
<g >
<title>at::CPUType::zero_ (2 samples, 0.01%)</title><rect x="62.9" y="37" width="0.2" height="15.0" fill="rgb(229,185,4)" rx="2" ry="2" />
<text  x="65.89" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1093" width="0.4" height="15.0" fill="rgb(240,178,1)" rx="2" ry="2" />
<text  x="1186.44" y="1103.5" ></text>
</g>
<g >
<title>.omp_outlined. (518 samples, 3.47%)</title><rect x="127.8" y="2005" width="41.0" height="15.0" fill="rgb(213,228,18)" rx="2" ry="2" />
<text  x="130.80" y="2015.5" >.om..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="421" width="0.3" height="15.0" fill="rgb(245,225,25)" rx="2" ry="2" />
<text  x="1186.83" y="431.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.03%)</title><rect x="740.8" y="2021" width="0.4" height="15.0" fill="rgb(231,172,35)" rx="2" ry="2" />
<text  x="743.85" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="325" width="6.7" height="15.0" fill="rgb(249,112,3)" rx="2" ry="2" />
<text  x="65.73" y="335.5" ></text>
</g>
<g >
<title>std::__insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;TDbDocument*, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (2 samples, 0.01%)</title><rect x="420.0" y="1957" width="0.2" height="15.0" fill="rgb(248,64,26)" rx="2" ry="2" />
<text  x="423.02" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="565" width="0.4" height="15.0" fill="rgb(217,136,37)" rx="2" ry="2" />
<text  x="1186.44" y="575.5" ></text>
</g>
<g >
<title>__pthread_once (2 samples, 0.01%)</title><rect x="740.9" y="2005" width="0.2" height="15.0" fill="rgb(253,209,30)" rx="2" ry="2" />
<text  x="743.93" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (33 samples, 0.22%)</title><rect x="738.0" y="2021" width="2.6" height="15.0" fill="rgb(215,122,53)" rx="2" ry="2" />
<text  x="741.00" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25 samples, 0.17%)</title><rect x="451.2" y="1861" width="1.9" height="15.0" fill="rgb(225,6,16)" rx="2" ry="2" />
<text  x="454.17" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1301" width="6.7" height="15.0" fill="rgb(241,100,41)" rx="2" ry="2" />
<text  x="65.73" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="452.0" y="1397" width="0.2" height="15.0" fill="rgb(214,215,7)" rx="2" ry="2" />
<text  x="455.04" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1349" width="0.4" height="15.0" fill="rgb(223,187,4)" rx="2" ry="2" />
<text  x="1186.44" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="805" width="0.4" height="15.0" fill="rgb(226,137,8)" rx="2" ry="2" />
<text  x="1186.44" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1141" width="0.3" height="15.0" fill="rgb(249,119,4)" rx="2" ry="2" />
<text  x="1186.83" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="452.9" y="1157" width="0.2" height="15.0" fill="rgb(234,220,50)" rx="2" ry="2" />
<text  x="455.91" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="439.4" y="1653" width="0.1" height="15.0" fill="rgb(206,107,19)" rx="2" ry="2" />
<text  x="442.39" y="1663.5" ></text>
</g>
<g >
<title>std::istream::read (4 samples, 0.03%)</title><rect x="1186.7" y="2053" width="0.3" height="15.0" fill="rgb(232,154,27)" rx="2" ry="2" />
<text  x="1189.68" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1173" width="0.3" height="15.0" fill="rgb(247,96,48)" rx="2" ry="2" />
<text  x="1186.83" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25 samples, 0.17%)</title><rect x="451.2" y="1909" width="1.9" height="15.0" fill="rgb(209,38,18)" rx="2" ry="2" />
<text  x="454.17" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="439.3" y="1829" width="0.2" height="15.0" fill="rgb(213,178,11)" rx="2" ry="2" />
<text  x="442.31" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="997" width="6.7" height="15.0" fill="rgb(249,2,6)" rx="2" ry="2" />
<text  x="65.73" y="1007.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::~Tokenizer (5 samples, 0.03%)</title><rect x="686.5" y="2037" width="0.4" height="15.0" fill="rgb(222,133,46)" rx="2" ry="2" />
<text  x="689.53" y="2047.5" ></text>
</g>
<g >
<title>TFastTextEmbedder::CalcEmbedding (3 samples, 0.02%)</title><rect x="634.2" y="1957" width="0.2" height="15.0" fill="rgb(211,183,29)" rx="2" ry="2" />
<text  x="637.19" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="452.4" y="1445" width="0.7" height="15.0" fill="rgb(250,92,50)" rx="2" ry="2" />
<text  x="455.43" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="949" width="0.3" height="15.0" fill="rgb(218,126,54)" rx="2" ry="2" />
<text  x="1186.83" y="959.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare@plt (15 samples, 0.10%)</title><rect x="1179.9" y="2053" width="1.2" height="15.0" fill="rgb(241,79,41)" rx="2" ry="2" />
<text  x="1182.88" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1461" width="0.3" height="15.0" fill="rgb(242,161,11)" rx="2" ry="2" />
<text  x="1186.83" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="452.0" y="1285" width="0.2" height="15.0" fill="rgb(252,160,35)" rx="2" ry="2" />
<text  x="455.04" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="451.6" y="1653" width="0.6" height="15.0" fill="rgb(210,20,38)" rx="2" ry="2" />
<text  x="454.56" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="451.7" y="1093" width="0.2" height="15.0" fill="rgb(215,27,28)" rx="2" ry="2" />
<text  x="454.72" y="1103.5" ></text>
</g>
<g >
<title>c10::VaryingShape::merge@plt (2 samples, 0.01%)</title><rect x="646.6" y="1989" width="0.2" height="15.0" fill="rgb(218,112,35)" rx="2" ry="2" />
<text  x="649.61" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="837" width="0.4" height="15.0" fill="rgb(221,94,43)" rx="2" ry="2" />
<text  x="1186.44" y="847.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="75.1" y="2021" width="0.2" height="15.0" fill="rgb(214,223,39)" rx="2" ry="2" />
<text  x="78.07" y="2031.5" ></text>
</g>
<g >
<title>TDbDocument::TDbDocument (2 samples, 0.01%)</title><rect x="182.8" y="1989" width="0.1" height="15.0" fill="rgb(252,88,15)" rx="2" ry="2" />
<text  x="185.75" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="949" width="6.7" height="15.0" fill="rgb(226,103,26)" rx="2" ry="2" />
<text  x="65.73" y="959.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getId (139 samples, 0.93%)</title><rect x="783.0" y="2053" width="11.0" height="15.0" fill="rgb(253,104,6)" rx="2" ry="2" />
<text  x="785.99" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1061" width="0.4" height="15.0" fill="rgb(218,65,23)" rx="2" ry="2" />
<text  x="1186.44" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="451.7" y="1221" width="0.2" height="15.0" fill="rgb(249,135,9)" rx="2" ry="2" />
<text  x="454.72" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="452.0" y="1381" width="0.2" height="15.0" fill="rgb(249,9,24)" rx="2" ry="2" />
<text  x="455.04" y="1391.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (2 samples, 0.01%)</title><rect x="741.7" y="2037" width="0.2" height="15.0" fill="rgb(228,17,7)" rx="2" ry="2" />
<text  x="744.72" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1429" width="0.3" height="15.0" fill="rgb(205,85,47)" rx="2" ry="2" />
<text  x="1186.83" y="1439.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1749" width="6.7" height="15.0" fill="rgb(229,58,37)" rx="2" ry="2" />
<text  x="65.73" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="661" width="0.3" height="15.0" fill="rgb(242,88,16)" rx="2" ry="2" />
<text  x="1186.83" y="671.5" ></text>
</g>
<g >
<title>malloc (3 samples, 0.02%)</title><rect x="435.6" y="1925" width="0.2" height="15.0" fill="rgb(210,76,27)" rx="2" ry="2" />
<text  x="438.59" y="1935.5" ></text>
</g>
<g >
<title>c10::FunctionSchema::checkArg (7 samples, 0.05%)</title><rect x="1152.0" y="1973" width="0.5" height="15.0" fill="rgb(211,210,42)" rx="2" ry="2" />
<text  x="1154.97" y="1983.5" ></text>
</g>
<g >
<title>c10::Dispatcher::callUnboxed&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Storage, long, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt; &gt; (11 samples, 0.07%)</title><rect x="469.2" y="1861" width="0.9" height="15.0" fill="rgb(221,100,42)" rx="2" ry="2" />
<text  x="472.19" y="1871.5" ></text>
</g>
<g >
<title>c10::optional_base&lt;c10::impl::InlineDeviceGuard&lt;c10::impl::VirtualGuardImpl&gt; &gt;::~optional_base (2 samples, 0.01%)</title><rect x="67.3" y="37" width="0.2" height="15.0" fill="rgb(223,142,29)" rx="2" ry="2" />
<text  x="70.32" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1317" width="0.4" height="15.0" fill="rgb(219,216,8)" rx="2" ry="2" />
<text  x="1186.44" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="917" width="0.4" height="15.0" fill="rgb(234,54,25)" rx="2" ry="2" />
<text  x="1186.44" y="927.5" ></text>
</g>
<g >
<title>operator delete@plt (2 samples, 0.01%)</title><rect x="1149.5" y="2053" width="0.2" height="15.0" fill="rgb(230,218,37)" rx="2" ry="2" />
<text  x="1152.52" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (63 samples, 0.42%)</title><rect x="62.7" y="85" width="5.0" height="15.0" fill="rgb(253,21,22)" rx="2" ry="2" />
<text  x="65.73" y="95.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (22 samples, 0.15%)</title><rect x="61.0" y="1941" width="1.7" height="15.0" fill="rgb(228,225,22)" rx="2" ry="2" />
<text  x="63.99" y="1951.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (3 samples, 0.02%)</title><rect x="1157.0" y="2053" width="0.2" height="15.0" fill="rgb(207,183,13)" rx="2" ry="2" />
<text  x="1159.95" y="2063.5" ></text>
</g>
<g >
<title>malloc@plt (4 samples, 0.03%)</title><rect x="674.5" y="2037" width="0.3" height="15.0" fill="rgb(236,154,26)" rx="2" ry="2" />
<text  x="677.52" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1429" width="6.7" height="15.0" fill="rgb(254,165,9)" rx="2" ry="2" />
<text  x="65.73" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="439.3" y="1845" width="0.2" height="15.0" fill="rgb(229,90,41)" rx="2" ry="2" />
<text  x="442.31" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1349" width="6.7" height="15.0" fill="rgb(241,97,44)" rx="2" ry="2" />
<text  x="65.73" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1183.4" y="1781" width="0.4" height="15.0" fill="rgb(239,165,53)" rx="2" ry="2" />
<text  x="1186.36" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="453.0" y="1061" width="0.1" height="15.0" fill="rgb(252,206,17)" rx="2" ry="2" />
<text  x="455.98" y="1071.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10 samples, 0.07%)</title><rect x="422.7" y="1925" width="0.8" height="15.0" fill="rgb(245,127,34)" rx="2" ry="2" />
<text  x="425.70" y="1935.5" ></text>
</g>
<g >
<title>at::native::DispatchStub&lt;void  (2 samples, 0.01%)</title><rect x="755.2" y="2021" width="0.2" height="15.0" fill="rgb(253,144,23)" rx="2" ry="2" />
<text  x="758.24" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1893" width="6.7" height="15.0" fill="rgb(247,76,9)" rx="2" ry="2" />
<text  x="65.73" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1183.8" y="2005" width="0.3" height="15.0" fill="rgb(219,195,6)" rx="2" ry="2" />
<text  x="1186.75" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.3" y="1925" width="0.5" height="15.0" fill="rgb(246,21,9)" rx="2" ry="2" />
<text  x="1186.28" y="1935.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (2 samples, 0.01%)</title><rect x="449.6" y="1941" width="0.1" height="15.0" fill="rgb(246,136,38)" rx="2" ry="2" />
<text  x="452.58" y="1951.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::_M_realloc_insert&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (2 samples, 0.01%)</title><rect x="444.8" y="1989" width="0.1" height="15.0" fill="rgb(249,129,47)" rx="2" ry="2" />
<text  x="447.76" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="69" width="0.3" height="15.0" fill="rgb(207,181,24)" rx="2" ry="2" />
<text  x="1186.83" y="79.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="517" width="6.7" height="15.0" fill="rgb(250,160,22)" rx="2" ry="2" />
<text  x="65.73" y="527.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (12 samples, 0.08%)</title><rect x="80.3" y="2021" width="0.9" height="15.0" fill="rgb(212,136,16)" rx="2" ry="2" />
<text  x="83.29" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1461" width="6.7" height="15.0" fill="rgb(208,103,5)" rx="2" ry="2" />
<text  x="65.73" y="1471.5" ></text>
</g>
<g >
<title>std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt;::vector (3 samples, 0.02%)</title><rect x="421.1" y="1989" width="0.3" height="15.0" fill="rgb(218,149,52)" rx="2" ry="2" />
<text  x="424.12" y="1999.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (127 samples, 0.85%)</title><rect x="772.9" y="2053" width="10.1" height="15.0" fill="rgb(251,166,54)" rx="2" ry="2" />
<text  x="775.95" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="649.1" y="2021" width="0.2" height="15.0" fill="rgb(236,165,29)" rx="2" ry="2" />
<text  x="652.14" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1183.8" y="1829" width="0.3" height="15.0" fill="rgb(232,109,13)" rx="2" ry="2" />
<text  x="1186.75" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1183.4" y="1813" width="0.4" height="15.0" fill="rgb(228,155,13)" rx="2" ry="2" />
<text  x="1186.36" y="1823.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (201 samples, 1.35%)</title><rect x="655.1" y="2037" width="15.9" height="15.0" fill="rgb(214,186,32)" rx="2" ry="2" />
<text  x="658.15" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="439.4" y="1701" width="0.1" height="15.0" fill="rgb(217,226,10)" rx="2" ry="2" />
<text  x="442.39" y="1711.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::slice_Tensor (2 samples, 0.01%)</title><rect x="467.3" y="1909" width="0.2" height="15.0" fill="rgb(235,189,19)" rx="2" ry="2" />
<text  x="470.29" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (215 samples, 1.44%)</title><rect x="58.1" y="2021" width="17.0" height="15.0" fill="rgb(253,16,52)" rx="2" ry="2" />
<text  x="61.07" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="451.7" y="917" width="0.2" height="15.0" fill="rgb(219,222,34)" rx="2" ry="2" />
<text  x="454.72" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="117" width="0.3" height="15.0" fill="rgb(238,63,47)" rx="2" ry="2" />
<text  x="1186.83" y="127.5" ></text>
</g>
<g >
<title>c10::KernelFunction::callUnboxed&lt;at::Tensor&amp;, at::Tensor&amp;, at::Tensor const&amp;, bool&gt; (10 samples, 0.07%)</title><rect x="467.7" y="1925" width="0.8" height="15.0" fill="rgb(209,100,1)" rx="2" ry="2" />
<text  x="470.69" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="501" width="0.3" height="15.0" fill="rgb(252,157,31)" rx="2" ry="2" />
<text  x="1186.83" y="511.5" ></text>
</g>
<g >
<title>free@plt (2 samples, 0.01%)</title><rect x="81.2" y="2021" width="0.2" height="15.0" fill="rgb(253,216,45)" rx="2" ry="2" />
<text  x="84.23" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="439.4" y="1685" width="0.1" height="15.0" fill="rgb(206,215,44)" rx="2" ry="2" />
<text  x="442.39" y="1695.5" ></text>
</g>
<g >
<title>__kmp_hardware_timestamp (77 samples, 0.52%)</title><rect x="747.3" y="2053" width="6.0" height="15.0" fill="rgb(222,207,7)" rx="2" ry="2" />
<text  x="750.25" y="2063.5" ></text>
</g>
<g >
<title>torch::zeros (10 samples, 0.07%)</title><rect x="471.6" y="1909" width="0.8" height="15.0" fill="rgb(238,4,41)" rx="2" ry="2" />
<text  x="474.56" y="1919.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (9 samples, 0.06%)</title><rect x="1154.3" y="1925" width="0.7" height="15.0" fill="rgb(252,97,30)" rx="2" ry="2" />
<text  x="1157.26" y="1935.5" ></text>
</g>
<g >
<title>std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;::emplace_back&lt;c10::IValue const&amp;&gt; (3 samples, 0.02%)</title><rect x="1153.1" y="1957" width="0.2" height="15.0" fill="rgb(218,4,46)" rx="2" ry="2" />
<text  x="1156.08" y="1967.5" ></text>
</g>
<g >
<title>c10::TensorImpl::compute_contiguous (2 samples, 0.01%)</title><rect x="640.3" y="1957" width="0.1" height="15.0" fill="rgb(214,134,20)" rx="2" ry="2" />
<text  x="643.28" y="1967.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::optional&lt;TDbDocument&gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_state&lt;std::_Bind&lt;std::optional&lt;TDbDocument&gt;  (2,387 samples, 15.99%)</title><rect x="447.3" y="1989" width="188.7" height="15.0" fill="rgb(206,193,4)" rx="2" ry="2" />
<text  x="450.29" y="1999.5" >std::__future_base::_Tas..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1397" width="0.4" height="15.0" fill="rgb(241,114,36)" rx="2" ry="2" />
<text  x="1186.44" y="1407.5" ></text>
</g>
<g >
<title>nlohmann::detail::dtoa_impl::grisu2_digit_gen (4 samples, 0.03%)</title><rect x="441.0" y="1909" width="0.3" height="15.0" fill="rgb(222,160,18)" rx="2" ry="2" />
<text  x="443.97" y="1919.5" ></text>
</g>
<g >
<title>at::CPUType::set__source_Storage_storage_offset (9 samples, 0.06%)</title><rect x="469.3" y="1797" width="0.7" height="15.0" fill="rgb(227,109,34)" rx="2" ry="2" />
<text  x="472.27" y="1807.5" ></text>
</g>
<g >
<title>torch::jit::getProfilingMode (2 samples, 0.01%)</title><rect x="1156.6" y="1989" width="0.2" height="15.0" fill="rgb(223,200,30)" rx="2" ry="2" />
<text  x="1159.64" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1589" width="6.7" height="15.0" fill="rgb(234,122,21)" rx="2" ry="2" />
<text  x="65.73" y="1599.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (5 samples, 0.03%)</title><rect x="441.4" y="1893" width="0.4" height="15.0" fill="rgb(228,155,24)" rx="2" ry="2" />
<text  x="444.36" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1365" width="0.3" height="15.0" fill="rgb(231,137,7)" rx="2" ry="2" />
<text  x="1186.83" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1183.8" y="1925" width="0.3" height="15.0" fill="rgb(250,73,17)" rx="2" ry="2" />
<text  x="1186.75" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="451.6" y="1605" width="0.6" height="15.0" fill="rgb(208,30,35)" rx="2" ry="2" />
<text  x="454.64" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="439.2" y="1925" width="0.3" height="15.0" fill="rgb(220,2,44)" rx="2" ry="2" />
<text  x="442.23" y="1935.5" ></text>
</g>
<g >
<title>cfree (10 samples, 0.07%)</title><rect x="76.4" y="2021" width="0.8" height="15.0" fill="rgb(254,142,4)" rx="2" ry="2" />
<text  x="79.41" y="2031.5" ></text>
</g>
<g >
<title>std::_Sp_counted_deleter&lt;torch::autograd::generated::SqueezeBackward1*, void  (3 samples, 0.02%)</title><rect x="1157.2" y="2053" width="0.2" height="15.0" fill="rgb(243,155,18)" rx="2" ry="2" />
<text  x="1160.19" y="2063.5" ></text>
</g>
<g >
<title>at::Tensor::set_ (13 samples, 0.09%)</title><rect x="469.0" y="1893" width="1.1" height="15.0" fill="rgb(210,124,32)" rx="2" ry="2" />
<text  x="472.03" y="1903.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::load (21 samples, 0.14%)</title><rect x="63.6" y="37" width="1.7" height="15.0" fill="rgb(220,55,48)" rx="2" ry="2" />
<text  x="66.60" y="47.5" ></text>
</g>
<g >
<title>__pthread_once_slow (2,394 samples, 16.04%)</title><rect x="446.7" y="2037" width="189.3" height="15.0" fill="rgb(223,106,53)" rx="2" ry="2" />
<text  x="449.74" y="2047.5" >__pthread_once_slow</text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="170.7" y="1925" width="0.2" height="15.0" fill="rgb(247,80,33)" rx="2" ry="2" />
<text  x="173.65" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (95 samples, 0.64%)</title><rect x="638.9" y="2021" width="7.5" height="15.0" fill="rgb(208,37,23)" rx="2" ry="2" />
<text  x="641.94" y="2031.5" ></text>
</g>
<g >
<title>memcmp@plt (8 samples, 0.05%)</title><rect x="1029.0" y="2053" width="0.7" height="15.0" fill="rgb(210,126,46)" rx="2" ry="2" />
<text  x="1032.03" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="439.4" y="1733" width="0.1" height="15.0" fill="rgb(246,63,5)" rx="2" ry="2" />
<text  x="442.39" y="1743.5" ></text>
</g>
<g >
<title>torch::autograd::impl::gradient_edge (2 samples, 0.01%)</title><rect x="70.6" y="1989" width="0.1" height="15.0" fill="rgb(248,48,16)" rx="2" ry="2" />
<text  x="73.56" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1183.8" y="1765" width="0.3" height="15.0" fill="rgb(252,20,22)" rx="2" ry="2" />
<text  x="1186.75" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="725" width="0.3" height="15.0" fill="rgb(211,212,19)" rx="2" ry="2" />
<text  x="1186.83" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="293" width="0.3" height="15.0" fill="rgb(215,221,43)" rx="2" ry="2" />
<text  x="1186.83" y="303.5" ></text>
</g>
<g >
<title>fasttext::FastText::getWordVector (16 samples, 0.11%)</title><rect x="617.7" y="1941" width="1.2" height="15.0" fill="rgb(212,31,29)" rx="2" ry="2" />
<text  x="620.67" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1765" width="6.7" height="15.0" fill="rgb(206,50,22)" rx="2" ry="2" />
<text  x="65.73" y="1775.5" ></text>
</g>
<g >
<title>nlohmann::detail::output_string_adapter&lt;char, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::write_characters (6 samples, 0.04%)</title><rect x="441.3" y="1909" width="0.5" height="15.0" fill="rgb(238,83,44)" rx="2" ry="2" />
<text  x="444.28" y="1919.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.01%)</title><rect x="438.0" y="1941" width="0.2" height="15.0" fill="rgb(220,119,5)" rx="2" ry="2" />
<text  x="441.04" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="451.7" y="1109" width="0.2" height="15.0" fill="rgb(230,188,50)" rx="2" ry="2" />
<text  x="454.72" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="613" width="0.3" height="15.0" fill="rgb(205,35,4)" rx="2" ry="2" />
<text  x="1186.83" y="623.5" ></text>
</g>
<g >
<title>c10::TensorImpl::shallow_copy_and_detach (5 samples, 0.03%)</title><rect x="644.9" y="2005" width="0.4" height="15.0" fill="rgb(244,218,9)" rx="2" ry="2" />
<text  x="647.95" y="2015.5" ></text>
</g>
<g >
<title>torch::autograd::SavedVariable::operator= (2 samples, 0.01%)</title><rect x="642.5" y="1989" width="0.2" height="15.0" fill="rgb(231,45,38)" rx="2" ry="2" />
<text  x="645.50" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="439.4" y="1637" width="0.1" height="15.0" fill="rgb(208,158,12)" rx="2" ry="2" />
<text  x="442.39" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1381" width="0.3" height="15.0" fill="rgb(217,12,35)" rx="2" ry="2" />
<text  x="1186.83" y="1391.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="405" width="6.7" height="15.0" fill="rgb(246,126,13)" rx="2" ry="2" />
<text  x="65.73" y="415.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::at (4 samples, 0.03%)</title><rect x="446.0" y="2005" width="0.3" height="15.0" fill="rgb(224,221,23)" rx="2" ry="2" />
<text  x="449.03" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1685" width="6.7" height="15.0" fill="rgb(212,212,38)" rx="2" ry="2" />
<text  x="65.73" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="837" width="0.3" height="15.0" fill="rgb(215,195,42)" rx="2" ry="2" />
<text  x="1186.83" y="847.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (2 samples, 0.01%)</title><rect x="746.5" y="2053" width="0.1" height="15.0" fill="rgb(213,216,41)" rx="2" ry="2" />
<text  x="749.46" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1509" width="0.4" height="15.0" fill="rgb(233,28,19)" rx="2" ry="2" />
<text  x="1186.44" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="53" width="0.4" height="15.0" fill="rgb(209,195,51)" rx="2" ry="2" />
<text  x="1186.44" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1183.8" y="1909" width="0.3" height="15.0" fill="rgb(237,218,50)" rx="2" ry="2" />
<text  x="1186.75" y="1919.5" ></text>
</g>
<g >
<title>at::TypeDefault::fill__Scalar (2 samples, 0.01%)</title><rect x="67.6" y="53" width="0.1" height="15.0" fill="rgb(206,115,26)" rx="2" ry="2" />
<text  x="70.56" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1221" width="0.4" height="15.0" fill="rgb(211,39,47)" rx="2" ry="2" />
<text  x="1186.44" y="1231.5" ></text>
</g>
<g >
<title>malloc (3 samples, 0.02%)</title><rect x="1166.6" y="2037" width="0.2" height="15.0" fill="rgb(219,43,54)" rx="2" ry="2" />
<text  x="1169.60" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="901" width="0.4" height="15.0" fill="rgb(213,203,48)" rx="2" ry="2" />
<text  x="1186.44" y="911.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_state&lt;std::_Bind&lt;std::optional&lt;TDbDocument&gt;  (2 samples, 0.01%)</title><rect x="51.0" y="2021" width="0.2" height="15.0" fill="rgb(242,113,51)" rx="2" ry="2" />
<text  x="54.03" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="451.7" y="949" width="0.2" height="15.0" fill="rgb(249,226,37)" rx="2" ry="2" />
<text  x="454.72" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1589" width="0.3" height="15.0" fill="rgb(240,17,0)" rx="2" ry="2" />
<text  x="1186.83" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1183.4" y="1861" width="0.4" height="15.0" fill="rgb(246,133,9)" rx="2" ry="2" />
<text  x="1186.36" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="439.2" y="1909" width="0.3" height="15.0" fill="rgb(247,12,45)" rx="2" ry="2" />
<text  x="442.23" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.07%)</title><rect x="452.3" y="1621" width="0.8" height="15.0" fill="rgb(213,45,29)" rx="2" ry="2" />
<text  x="455.27" y="1631.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (2 samples, 0.01%)</title><rect x="172.0" y="1925" width="0.2" height="15.0" fill="rgb(208,158,31)" rx="2" ry="2" />
<text  x="175.00" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1637" width="0.4" height="15.0" fill="rgb(249,92,54)" rx="2" ry="2" />
<text  x="1186.44" y="1647.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getSubwords (4 samples, 0.03%)</title><rect x="77.4" y="2021" width="0.3" height="15.0" fill="rgb(238,33,28)" rx="2" ry="2" />
<text  x="80.36" y="2031.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (4 samples, 0.03%)</title><rect x="446.3" y="1845" width="0.4" height="15.0" fill="rgb(231,153,37)" rx="2" ry="2" />
<text  x="449.34" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="309" width="6.7" height="15.0" fill="rgb(227,48,13)" rx="2" ry="2" />
<text  x="65.73" y="319.5" ></text>
</g>
<g >
<title>at::Tensor::squeeze (3 samples, 0.02%)</title><rect x="464.8" y="1925" width="0.2" height="15.0" fill="rgb(245,188,41)" rx="2" ry="2" />
<text  x="467.76" y="1935.5" ></text>
</g>
<g >
<title>at::TypeDefault::fill__Scalar (11 samples, 0.07%)</title><rect x="68.3" y="85" width="0.8" height="15.0" fill="rgb(213,19,22)" rx="2" ry="2" />
<text  x="71.27" y="95.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (3 samples, 0.02%)</title><rect x="434.1" y="1941" width="0.2" height="15.0" fill="rgb(227,42,34)" rx="2" ry="2" />
<text  x="437.09" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1733" width="6.7" height="15.0" fill="rgb(248,19,36)" rx="2" ry="2" />
<text  x="65.73" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1557" width="6.7" height="15.0" fill="rgb(243,124,8)" rx="2" ry="2" />
<text  x="65.73" y="1567.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (9 samples, 0.06%)</title><rect x="650.7" y="2037" width="0.7" height="15.0" fill="rgb(221,157,9)" rx="2" ry="2" />
<text  x="653.72" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="725" width="6.7" height="15.0" fill="rgb(215,151,7)" rx="2" ry="2" />
<text  x="65.73" y="735.5" ></text>
</g>
<g >
<title>std::locale::~locale (10 samples, 0.07%)</title><rect x="633.0" y="1941" width="0.8" height="15.0" fill="rgb(210,43,11)" rx="2" ry="2" />
<text  x="636.01" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="452.0" y="1317" width="0.2" height="15.0" fill="rgb(248,167,45)" rx="2" ry="2" />
<text  x="455.04" y="1327.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.01%)</title><rect x="123.7" y="2021" width="0.1" height="15.0" fill="rgb(212,223,31)" rx="2" ry="2" />
<text  x="126.69" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="453.0" y="1093" width="0.1" height="15.0" fill="rgb(205,32,9)" rx="2" ry="2" />
<text  x="455.98" y="1103.5" ></text>
</g>
<g >
<title>at::CPUType::empty_memory_format (3 samples, 0.02%)</title><rect x="636.5" y="2037" width="0.2" height="15.0" fill="rgb(207,105,41)" rx="2" ry="2" />
<text  x="639.49" y="2047.5" ></text>
</g>
<g >
<title>torch::autograd::SavedVariable::SavedVariable (13 samples, 0.09%)</title><rect x="641.5" y="1989" width="1.0" height="15.0" fill="rgb(224,2,46)" rx="2" ry="2" />
<text  x="644.47" y="1999.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (24 samples, 0.16%)</title><rect x="89.1" y="2021" width="1.9" height="15.0" fill="rgb(237,78,0)" rx="2" ry="2" />
<text  x="92.06" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (27 samples, 0.18%)</title><rect x="646.8" y="2021" width="2.1" height="15.0" fill="rgb(247,51,32)" rx="2" ry="2" />
<text  x="649.77" y="2031.5" ></text>
</g>
<g >
<title>malloc (8 samples, 0.05%)</title><rect x="692.1" y="2021" width="0.7" height="15.0" fill="rgb(220,190,31)" rx="2" ry="2" />
<text  x="695.15" y="2031.5" ></text>
</g>
<g >
<title>torch::autograd::AccumulateGrad::AccumulateGrad (3 samples, 0.02%)</title><rect x="127.1" y="2005" width="0.2" height="15.0" fill="rgb(212,156,27)" rx="2" ry="2" />
<text  x="130.09" y="2015.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="635.5" y="1957" width="0.1" height="15.0" fill="rgb(246,113,54)" rx="2" ry="2" />
<text  x="638.46" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="405" width="0.3" height="15.0" fill="rgb(250,94,12)" rx="2" ry="2" />
<text  x="1186.83" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="439.2" y="1877" width="0.3" height="15.0" fill="rgb(244,164,43)" rx="2" ry="2" />
<text  x="442.23" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="451.6" y="1525" width="0.6" height="15.0" fill="rgb(230,205,10)" rx="2" ry="2" />
<text  x="454.64" y="1535.5" ></text>
</g>
<g >
<title>fasttext::Loss::predict (2 samples, 0.01%)</title><rect x="71.8" y="2005" width="0.2" height="15.0" fill="rgb(250,10,11)" rx="2" ry="2" />
<text  x="74.83" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="341" width="6.7" height="15.0" fill="rgb(214,134,53)" rx="2" ry="2" />
<text  x="65.73" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1183.8" y="1813" width="0.3" height="15.0" fill="rgb(237,198,32)" rx="2" ry="2" />
<text  x="1186.75" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1183.8" y="1781" width="0.3" height="15.0" fill="rgb(247,110,42)" rx="2" ry="2" />
<text  x="1186.75" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (8 samples, 0.05%)</title><rect x="452.5" y="1381" width="0.6" height="15.0" fill="rgb(235,113,51)" rx="2" ry="2" />
<text  x="455.51" y="1391.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (2 samples, 0.01%)</title><rect x="1181.1" y="2053" width="0.1" height="15.0" fill="rgb(229,51,31)" rx="2" ry="2" />
<text  x="1184.07" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1184.0" y="37" width="0.1" height="15.0" fill="rgb(239,101,22)" rx="2" ry="2" />
<text  x="1186.99" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1013" width="0.4" height="15.0" fill="rgb(224,226,10)" rx="2" ry="2" />
<text  x="1186.44" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.07%)</title><rect x="451.3" y="1749" width="0.9" height="15.0" fill="rgb(221,99,14)" rx="2" ry="2" />
<text  x="454.32" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="742.1" y="2021" width="0.3" height="15.0" fill="rgb(234,141,6)" rx="2" ry="2" />
<text  x="745.11" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="533" width="6.7" height="15.0" fill="rgb(239,32,21)" rx="2" ry="2" />
<text  x="65.73" y="543.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="821" width="6.7" height="15.0" fill="rgb(244,82,18)" rx="2" ry="2" />
<text  x="65.73" y="831.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::addRowToVector (1,793 samples, 12.01%)</title><rect x="475.6" y="1941" width="141.8" height="15.0" fill="rgb(241,197,18)" rx="2" ry="2" />
<text  x="478.60" y="1951.5" >fasttext::DenseMat..</text>
</g>
<g >
<title>mkl_blas_sgemm (2 samples, 0.01%)</title><rect x="675.1" y="2037" width="0.2" height="15.0" fill="rgb(215,190,43)" rx="2" ry="2" />
<text  x="678.15" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="981" width="6.7" height="15.0" fill="rgb(254,169,34)" rx="2" ry="2" />
<text  x="65.73" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.07%)</title><rect x="452.4" y="1589" width="0.7" height="15.0" fill="rgb(243,5,9)" rx="2" ry="2" />
<text  x="455.35" y="1599.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="183.1" y="1941" width="0.2" height="15.0" fill="rgb(246,227,49)" rx="2" ry="2" />
<text  x="186.15" y="1951.5" ></text>
</g>
<g >
<title>std::__merge_sort_with_buffer&lt;__gnu_cxx::__normal_iterator&lt;TDbDocument*, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, TDbDocument*, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (12 samples, 0.08%)</title><rect x="419.9" y="1973" width="1.0" height="15.0" fill="rgb(247,102,43)" rx="2" ry="2" />
<text  x="422.94" y="1983.5" ></text>
</g>
<g >
<title>at::Tensor::unsqueeze (3 samples, 0.02%)</title><rect x="465.0" y="1925" width="0.2" height="15.0" fill="rgb(212,80,12)" rx="2" ry="2" />
<text  x="468.00" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="453.0" y="1029" width="0.1" height="15.0" fill="rgb(208,168,45)" rx="2" ry="2" />
<text  x="455.98" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="293" width="0.4" height="15.0" fill="rgb(216,216,16)" rx="2" ry="2" />
<text  x="1186.44" y="303.5" ></text>
</g>
<g >
<title>__dynamic_cast (5 samples, 0.03%)</title><rect x="746.9" y="2053" width="0.4" height="15.0" fill="rgb(224,54,1)" rx="2" ry="2" />
<text  x="749.86" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="357" width="6.7" height="15.0" fill="rgb(231,44,20)" rx="2" ry="2" />
<text  x="65.73" y="367.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (72 samples, 0.48%)</title><rect x="51.3" y="2037" width="5.7" height="15.0" fill="rgb(234,144,2)" rx="2" ry="2" />
<text  x="54.27" y="2047.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (3 samples, 0.02%)</title><rect x="432.3" y="1941" width="0.2" height="15.0" fill="rgb(211,225,28)" rx="2" ry="2" />
<text  x="435.27" y="1951.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::type_to_char (4 samples, 0.03%)</title><rect x="1032.7" y="2053" width="0.4" height="15.0" fill="rgb(214,159,53)" rx="2" ry="2" />
<text  x="1035.75" y="2063.5" ></text>
</g>
<g >
<title>torch::autograd::AccumulateGrad::AccumulateGrad (2 samples, 0.01%)</title><rect x="643.4" y="1973" width="0.1" height="15.0" fill="rgb(227,159,1)" rx="2" ry="2" />
<text  x="646.37" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1333" width="0.4" height="15.0" fill="rgb(212,184,21)" rx="2" ry="2" />
<text  x="1186.44" y="1343.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::rfind (2 samples, 0.01%)</title><rect x="638.1" y="2005" width="0.1" height="15.0" fill="rgb(247,171,11)" rx="2" ry="2" />
<text  x="641.07" y="2015.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (67 samples, 0.45%)</title><rect x="1074.4" y="2053" width="5.3" height="15.0" fill="rgb(212,96,40)" rx="2" ry="2" />
<text  x="1077.41" y="2063.5" ></text>
</g>
<g >
<title>GetHost (5 samples, 0.03%)</title><rect x="439.2" y="1957" width="0.4" height="15.0" fill="rgb(210,1,42)" rx="2" ry="2" />
<text  x="442.23" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="645" width="6.7" height="15.0" fill="rgb(238,179,37)" rx="2" ry="2" />
<text  x="65.73" y="655.5" ></text>
</g>
<g >
<title>TNewsCluster::CalcImportance (217 samples, 1.45%)</title><rect x="422.0" y="1989" width="17.1" height="15.0" fill="rgb(243,132,35)" rx="2" ry="2" />
<text  x="424.99" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="789" width="6.7" height="15.0" fill="rgb(213,149,36)" rx="2" ry="2" />
<text  x="65.73" y="799.5" ></text>
</g>
<g >
<title>at::TypeDefault::fill__Scalar (6 samples, 0.04%)</title><rect x="67.8" y="69" width="0.5" height="15.0" fill="rgb(219,3,53)" rx="2" ry="2" />
<text  x="70.79" y="79.5" ></text>
</g>
<g >
<title>at::native::fill_out (2 samples, 0.01%)</title><rect x="69.0" y="69" width="0.1" height="15.0" fill="rgb(240,84,18)" rx="2" ry="2" />
<text  x="71.98" y="79.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="757" width="6.7" height="15.0" fill="rgb(211,164,40)" rx="2" ry="2" />
<text  x="65.73" y="767.5" ></text>
</g>
<g >
<title>torch::autograd::impl::materialize_autograd_meta (2 samples, 0.01%)</title><rect x="744.6" y="1973" width="0.1" height="15.0" fill="rgb(236,10,8)" rx="2" ry="2" />
<text  x="747.56" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="452.9" y="1141" width="0.2" height="15.0" fill="rgb(237,91,36)" rx="2" ry="2" />
<text  x="455.91" y="1151.5" ></text>
</g>
<g >
<title>malloc (107 samples, 0.72%)</title><rect x="1020.5" y="2053" width="8.5" height="15.0" fill="rgb(211,104,32)" rx="2" ry="2" />
<text  x="1023.49" y="2063.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="634.4" y="1957" width="0.2" height="15.0" fill="rgb(222,185,34)" rx="2" ry="2" />
<text  x="637.43" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1045" width="0.3" height="15.0" fill="rgb(254,190,46)" rx="2" ry="2" />
<text  x="1186.83" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="165" width="0.4" height="15.0" fill="rgb(252,60,36)" rx="2" ry="2" />
<text  x="1186.44" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1573" width="0.4" height="15.0" fill="rgb(220,119,11)" rx="2" ry="2" />
<text  x="1186.44" y="1583.5" ></text>
</g>
<g >
<title>onmt::unicode::is_separator (132 samples, 0.88%)</title><rect x="1139.1" y="2053" width="10.4" height="15.0" fill="rgb(228,24,48)" rx="2" ry="2" />
<text  x="1142.08" y="2063.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (27 samples, 0.18%)</title><rect x="426.4" y="1925" width="2.2" height="15.0" fill="rgb(226,77,53)" rx="2" ry="2" />
<text  x="429.42" y="1935.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (2,390 samples, 16.01%)</title><rect x="447.1" y="2005" width="188.9" height="15.0" fill="rgb(236,201,40)" rx="2" ry="2" />
<text  x="450.05" y="2015.5" >std::_Function_handler&lt;s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1493" width="0.3" height="15.0" fill="rgb(205,56,33)" rx="2" ry="2" />
<text  x="1186.83" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1253" width="0.4" height="15.0" fill="rgb(241,128,47)" rx="2" ry="2" />
<text  x="1186.44" y="1263.5" ></text>
</g>
<g >
<title>TAlexaAgencyRating::GetCountryShare (27 samples, 0.18%)</title><rect x="422.7" y="1941" width="2.1" height="15.0" fill="rgb(250,95,39)" rx="2" ry="2" />
<text  x="425.70" y="1951.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (40 samples, 0.27%)</title><rect x="734.7" y="2037" width="3.1" height="15.0" fill="rgb(247,140,20)" rx="2" ry="2" />
<text  x="737.68" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1237" width="0.4" height="15.0" fill="rgb(212,83,9)" rx="2" ry="2" />
<text  x="1186.44" y="1247.5" ></text>
</g>
<g >
<title>caffe2::detail::_New&lt;float&gt; (42 samples, 0.28%)</title><rect x="758.6" y="2053" width="3.4" height="15.0" fill="rgb(220,94,25)" rx="2" ry="2" />
<text  x="761.64" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="613" width="0.4" height="15.0" fill="rgb(249,106,34)" rx="2" ry="2" />
<text  x="1186.44" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="581" width="0.3" height="15.0" fill="rgb(206,67,22)" rx="2" ry="2" />
<text  x="1186.83" y="591.5" ></text>
</g>
<g >
<title>torch::autograd::generated::TBackward::~TBackward (7 samples, 0.05%)</title><rect x="744.4" y="2037" width="0.6" height="15.0" fill="rgb(252,154,51)" rx="2" ry="2" />
<text  x="747.41" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::_M_realloc_insert&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const&amp;&gt; (4 samples, 0.03%)</title><rect x="446.3" y="2005" width="0.4" height="15.0" fill="rgb(206,19,53)" rx="2" ry="2" />
<text  x="449.34" y="2015.5" ></text>
</g>
<g >
<title>fasttext::SoftmaxLoss::computeOutput (2 samples, 0.01%)</title><rect x="1008.2" y="2053" width="0.2" height="15.0" fill="rgb(221,32,26)" rx="2" ry="2" />
<text  x="1011.24" y="2063.5" ></text>
</g>
<g >
<title>at::TensorIterator::build (2 samples, 0.01%)</title><rect x="67.9" y="37" width="0.1" height="15.0" fill="rgb(222,141,17)" rx="2" ry="2" />
<text  x="70.87" y="47.5" ></text>
</g>
<g >
<title>TDocument::~TDocument (2 samples, 0.01%)</title><rect x="169.9" y="1989" width="0.1" height="15.0" fill="rgb(211,99,53)" rx="2" ry="2" />
<text  x="172.86" y="1999.5" ></text>
</g>
<g >
<title>at::AutoNonVariableTypeMode::AutoNonVariableTypeMode (3 samples, 0.02%)</title><rect x="756.8" y="2037" width="0.3" height="15.0" fill="rgb(213,49,15)" rx="2" ry="2" />
<text  x="759.82" y="2047.5" ></text>
</g>
<g >
<title>torch::autograd::impl::version_counter (2 samples, 0.01%)</title><rect x="647.6" y="1973" width="0.1" height="15.0" fill="rgb(243,51,41)" rx="2" ry="2" />
<text  x="650.56" y="1983.5" ></text>
</g>
<g >
<title>at::TensorIterator::nullary_op (2 samples, 0.01%)</title><rect x="69.1" y="85" width="0.2" height="15.0" fill="rgb(228,136,6)" rx="2" ry="2" />
<text  x="72.14" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1589" width="0.4" height="15.0" fill="rgb(246,75,32)" rx="2" ry="2" />
<text  x="1186.44" y="1599.5" ></text>
</g>
<g >
<title>TThreadPool::enqueue&lt;std::optional&lt;TDbDocument&gt;  (4 samples, 0.03%)</title><rect x="170.0" y="1989" width="0.3" height="15.0" fill="rgb(228,220,39)" rx="2" ry="2" />
<text  x="173.02" y="1999.5" ></text>
</g>
<g >
<title>at::TensorIterator::allocate_outputs (2 samples, 0.01%)</title><rect x="70.8" y="1973" width="0.2" height="15.0" fill="rgb(230,168,14)" rx="2" ry="2" />
<text  x="73.80" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1541" width="0.3" height="15.0" fill="rgb(230,102,53)" rx="2" ry="2" />
<text  x="1186.83" y="1551.5" ></text>
</g>
<g >
<title>TAnnotator::PreprocessText (91 samples, 0.61%)</title><rect x="453.2" y="1957" width="7.2" height="15.0" fill="rgb(207,35,30)" rx="2" ry="2" />
<text  x="456.22" y="1967.5" ></text>
</g>
<g >
<title>TAnnotator::AnnotateAll (172 samples, 1.15%)</title><rect x="169.2" y="2005" width="13.6" height="15.0" fill="rgb(223,132,0)" rx="2" ry="2" />
<text  x="172.15" y="2015.5" ></text>
</g>
<g >
<title>nlohmann::detail::parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::sax_parse_internal&lt;nlohmann::detail::json_sax_dom_parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; (151 samples, 1.01%)</title><rect x="170.4" y="1957" width="12.0" height="15.0" fill="rgb(235,43,18)" rx="2" ry="2" />
<text  x="173.42" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="117" width="0.4" height="15.0" fill="rgb(254,226,35)" rx="2" ry="2" />
<text  x="1186.44" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="581" width="0.4" height="15.0" fill="rgb(243,40,39)" rx="2" ry="2" />
<text  x="1186.44" y="591.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1877" width="6.7" height="15.0" fill="rgb(223,152,54)" rx="2" ry="2" />
<text  x="65.73" y="1887.5" ></text>
</g>
<g >
<title>std::istream::get (4 samples, 0.03%)</title><rect x="1186.3" y="2053" width="0.3" height="15.0" fill="rgb(225,196,35)" rx="2" ry="2" />
<text  x="1189.28" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (28 samples, 0.19%)</title><rect x="450.9" y="1941" width="2.2" height="15.0" fill="rgb(222,179,7)" rx="2" ry="2" />
<text  x="453.93" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="452.9" y="1125" width="0.2" height="15.0" fill="rgb(209,77,31)" rx="2" ry="2" />
<text  x="455.91" y="1135.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (12 samples, 0.08%)</title><rect x="683.3" y="2037" width="0.9" height="15.0" fill="rgb(214,142,33)" rx="2" ry="2" />
<text  x="686.29" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::dump (30 samples, 0.20%)</title><rect x="440.5" y="2005" width="2.4" height="15.0" fill="rgb(206,118,18)" rx="2" ry="2" />
<text  x="443.49" y="2015.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="444.9" y="1989" width="0.2" height="15.0" fill="rgb(218,136,38)" rx="2" ry="2" />
<text  x="447.92" y="1999.5" ></text>
</g>
<g >
<title>at::TensorIterator::~TensorIterator (3 samples, 0.02%)</title><rect x="647.9" y="2005" width="0.2" height="15.0" fill="rgb(221,173,48)" rx="2" ry="2" />
<text  x="650.87" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="693" width="0.3" height="15.0" fill="rgb(232,85,52)" rx="2" ry="2" />
<text  x="1186.83" y="703.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="837" width="6.7" height="15.0" fill="rgb(219,180,54)" rx="2" ry="2" />
<text  x="65.73" y="847.5" ></text>
</g>
<g >
<title>at::TensorIterator::binary_op (11 samples, 0.07%)</title><rect x="70.8" y="2005" width="0.9" height="15.0" fill="rgb(243,29,14)" rx="2" ry="2" />
<text  x="73.80" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="452.5" y="1365" width="0.6" height="15.0" fill="rgb(250,142,36)" rx="2" ry="2" />
<text  x="455.51" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="439.4" y="1573" width="0.1" height="15.0" fill="rgb(245,168,3)" rx="2" ry="2" />
<text  x="442.39" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="451.6" y="1397" width="0.3" height="15.0" fill="rgb(208,182,47)" rx="2" ry="2" />
<text  x="454.64" y="1407.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (3 samples, 0.02%)</title><rect x="49.8" y="2021" width="0.3" height="15.0" fill="rgb(222,0,46)" rx="2" ry="2" />
<text  x="52.85" y="2031.5" ></text>
</g>
<g >
<title>tg::from_json&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (4 samples, 0.03%)</title><rect x="450.6" y="1941" width="0.3" height="15.0" fill="rgb(254,117,0)" rx="2" ry="2" />
<text  x="453.61" y="1951.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (18 samples, 0.12%)</title><rect x="180.8" y="1909" width="1.4" height="15.0" fill="rgb(237,133,4)" rx="2" ry="2" />
<text  x="183.77" y="1919.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (33 samples, 0.22%)</title><rect x="47.2" y="2053" width="2.6" height="15.0" fill="rgb(214,104,24)" rx="2" ry="2" />
<text  x="50.16" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1541" width="0.4" height="15.0" fill="rgb(219,47,8)" rx="2" ry="2" />
<text  x="1186.44" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="965" width="6.7" height="15.0" fill="rgb(246,135,27)" rx="2" ry="2" />
<text  x="65.73" y="975.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="649.1" y="2005" width="0.2" height="15.0" fill="rgb(244,101,28)" rx="2" ry="2" />
<text  x="652.14" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="452.0" y="1413" width="0.2" height="15.0" fill="rgb(206,220,22)" rx="2" ry="2" />
<text  x="454.96" y="1423.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (4 samples, 0.03%)</title><rect x="125.9" y="2021" width="0.3" height="15.0" fill="rgb(208,175,30)" rx="2" ry="2" />
<text  x="128.90" y="2031.5" ></text>
</g>
<g >
<title>at::TensorIterator::build (7 samples, 0.05%)</title><rect x="68.3" y="53" width="0.5" height="15.0" fill="rgb(224,41,37)" rx="2" ry="2" />
<text  x="71.27" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.3" y="1973" width="0.5" height="15.0" fill="rgb(227,169,24)" rx="2" ry="2" />
<text  x="1186.28" y="1983.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::_M_realloc_insert&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (2 samples, 0.01%)</title><rect x="445.6" y="1989" width="0.2" height="15.0" fill="rgb(228,126,26)" rx="2" ry="2" />
<text  x="448.63" y="1999.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (5 samples, 0.03%)</title><rect x="632.1" y="1941" width="0.4" height="15.0" fill="rgb(220,170,30)" rx="2" ry="2" />
<text  x="635.06" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1381" width="6.7" height="15.0" fill="rgb(235,93,43)" rx="2" ry="2" />
<text  x="65.73" y="1391.5" ></text>
</g>
<g >
<title>TNewsCluster::AddDocument (5 samples, 0.03%)</title><rect x="182.9" y="1973" width="0.4" height="15.0" fill="rgb(229,120,23)" rx="2" ry="2" />
<text  x="185.91" y="1983.5" ></text>
</g>
<g >
<title>at::native::DispatchStub&lt;void  (2 samples, 0.01%)</title><rect x="1154.7" y="1861" width="0.1" height="15.0" fill="rgb(235,35,42)" rx="2" ry="2" />
<text  x="1157.66" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1157" width="0.4" height="15.0" fill="rgb(253,191,10)" rx="2" ry="2" />
<text  x="1186.44" y="1167.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt; const&amp;&gt; (4 samples, 0.03%)</title><rect x="446.3" y="1861" width="0.4" height="15.0" fill="rgb(210,129,3)" rx="2" ry="2" />
<text  x="449.34" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1717" width="6.7" height="15.0" fill="rgb(231,219,41)" rx="2" ry="2" />
<text  x="65.73" y="1727.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (4 samples, 0.03%)</title><rect x="1166.8" y="2037" width="0.4" height="15.0" fill="rgb(242,107,35)" rx="2" ry="2" />
<text  x="1169.83" y="2047.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (22 samples, 0.15%)</title><rect x="1154.1" y="1941" width="1.7" height="15.0" fill="rgb(232,54,14)" rx="2" ry="2" />
<text  x="1157.11" y="1951.5" ></text>
</g>
<g >
<title>TAgencyRating::ScoreUrl (7 samples, 0.05%)</title><rect x="439.2" y="1973" width="0.6" height="15.0" fill="rgb(239,181,3)" rx="2" ry="2" />
<text  x="442.23" y="1983.5" ></text>
</g>
<g >
<title>c10::SmallVectorImpl&lt;long&gt;::operator= (2 samples, 0.01%)</title><rect x="643.5" y="2005" width="0.2" height="15.0" fill="rgb(222,113,28)" rx="2" ry="2" />
<text  x="646.52" y="2015.5" ></text>
</g>
<g >
<title>memcpy@plt (2 samples, 0.01%)</title><rect x="456.0" y="1925" width="0.1" height="15.0" fill="rgb(226,191,4)" rx="2" ry="2" />
<text  x="458.99" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1237" width="0.3" height="15.0" fill="rgb(213,219,52)" rx="2" ry="2" />
<text  x="1186.83" y="1247.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::get_case (3 samples, 0.02%)</title><rect x="1032.2" y="2053" width="0.2" height="15.0" fill="rgb(238,46,6)" rx="2" ry="2" />
<text  x="1035.19" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1183.8" y="1717" width="0.3" height="15.0" fill="rgb(227,56,44)" rx="2" ry="2" />
<text  x="1186.75" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1925" width="6.7" height="15.0" fill="rgb(242,133,14)" rx="2" ry="2" />
<text  x="65.73" y="1935.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (27 samples, 0.18%)</title><rect x="440.6" y="1941" width="2.1" height="15.0" fill="rgb(217,124,41)" rx="2" ry="2" />
<text  x="443.57" y="1951.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (3 samples, 0.02%)</title><rect x="72.0" y="2005" width="0.2" height="15.0" fill="rgb(207,109,51)" rx="2" ry="2" />
<text  x="74.98" y="2015.5" ></text>
</g>
<g >
<title>c10::TensorOptions::merge_in (3 samples, 0.02%)</title><rect x="757.5" y="2053" width="0.3" height="15.0" fill="rgb(224,56,38)" rx="2" ry="2" />
<text  x="760.53" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (81 samples, 0.54%)</title><rect x="62.7" y="117" width="6.4" height="15.0" fill="rgb(221,200,13)" rx="2" ry="2" />
<text  x="65.73" y="127.5" ></text>
</g>
<g >
<title>onmt::unicode::cp_to_utf8[abi:cxx11] (2 samples, 0.01%)</title><rect x="1074.3" y="2053" width="0.1" height="15.0" fill="rgb(237,74,29)" rx="2" ry="2" />
<text  x="1077.25" y="2063.5" ></text>
</g>
<g >
<title>TNewsCluster::CalcFeatures (191 samples, 1.28%)</title><rect x="422.1" y="1973" width="15.1" height="15.0" fill="rgb(241,205,52)" rx="2" ry="2" />
<text  x="425.07" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="452.9" y="1173" width="0.2" height="15.0" fill="rgb(225,174,20)" rx="2" ry="2" />
<text  x="455.91" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1183.4" y="1765" width="0.4" height="15.0" fill="rgb(223,21,36)" rx="2" ry="2" />
<text  x="1186.36" y="1775.5" ></text>
</g>
<g >
<title>TNewsCluster::Summarize (11 samples, 0.07%)</title><rect x="439.1" y="1989" width="0.9" height="15.0" fill="rgb(242,142,51)" rx="2" ry="2" />
<text  x="442.15" y="1999.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (20 samples, 0.13%)</title><rect x="1184.1" y="2053" width="1.6" height="15.0" fill="rgb(231,113,45)" rx="2" ry="2" />
<text  x="1187.15" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="451.6" y="1445" width="0.3" height="15.0" fill="rgb(234,225,10)" rx="2" ry="2" />
<text  x="454.64" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="133" width="0.3" height="15.0" fill="rgb(210,123,43)" rx="2" ry="2" />
<text  x="1186.83" y="143.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (345 samples, 2.31%)</title><rect x="794.0" y="2053" width="27.3" height="15.0" fill="rgb(230,83,1)" rx="2" ry="2" />
<text  x="796.98" y="2063.5" >f..</text>
</g>
<g >
<title>[unknown] (6 samples, 0.04%)</title><rect x="639.3" y="1957" width="0.4" height="15.0" fill="rgb(223,82,17)" rx="2" ry="2" />
<text  x="642.25" y="1967.5" ></text>
</g>
<g >
<title>c10::impl::tls_local_dispatch_key_set (2 samples, 0.01%)</title><rect x="758.4" y="2053" width="0.2" height="15.0" fill="rgb(211,145,40)" rx="2" ry="2" />
<text  x="761.40" y="2063.5" ></text>
</g>
<g >
<title>at::TypeDefault::fill__Scalar (2 samples, 0.01%)</title><rect x="69.1" y="101" width="0.2" height="15.0" fill="rgb(217,59,44)" rx="2" ry="2" />
<text  x="72.14" y="111.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.03%)</title><rect x="49.8" y="2037" width="0.4" height="15.0" fill="rgb(241,132,34)" rx="2" ry="2" />
<text  x="52.85" y="2047.5" ></text>
</g>
<g >
<title>at::native::as_strided_tensorimpl (3 samples, 0.02%)</title><rect x="645.9" y="1989" width="0.2" height="15.0" fill="rgb(228,11,17)" rx="2" ry="2" />
<text  x="648.90" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (8,782 samples, 58.84%)</title><rect x="51.3" y="2053" width="694.3" height="15.0" fill="rgb(243,10,27)" rx="2" ry="2" />
<text  x="54.27" y="2063.5" >[unknown]</text>
</g>
<g >
<title>std::__find_if&lt;std::pair&lt;tg::ELanguage, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const*, __gnu_cxx::__ops::_Iter_pred&lt;void tg::from_json&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; (4 samples, 0.03%)</title><rect x="450.6" y="1925" width="0.3" height="15.0" fill="rgb(240,111,41)" rx="2" ry="2" />
<text  x="453.61" y="1935.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (14 samples, 0.09%)</title><rect x="429.6" y="1941" width="1.1" height="15.0" fill="rgb(249,50,15)" rx="2" ry="2" />
<text  x="432.58" y="1951.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (122 samples, 0.82%)</title><rect x="1157.5" y="2053" width="9.7" height="15.0" fill="rgb(222,11,44)" rx="2" ry="2" />
<text  x="1160.51" y="2063.5" ></text>
</g>
<g >
<title>onmt::add_final_token&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (21 samples, 0.14%)</title><rect x="1067.5" y="2053" width="1.6" height="15.0" fill="rgb(247,40,30)" rx="2" ry="2" />
<text  x="1070.45" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="389" width="0.4" height="15.0" fill="rgb(207,220,48)" rx="2" ry="2" />
<text  x="1186.44" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="149" width="0.3" height="15.0" fill="rgb(206,33,7)" rx="2" ry="2" />
<text  x="1186.83" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="451.7" y="1173" width="0.2" height="15.0" fill="rgb(252,54,43)" rx="2" ry="2" />
<text  x="454.72" y="1183.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (3 samples, 0.02%)</title><rect x="445.8" y="2005" width="0.2" height="15.0" fill="rgb(249,205,7)" rx="2" ry="2" />
<text  x="448.79" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="451.7" y="1285" width="0.2" height="15.0" fill="rgb(233,106,27)" rx="2" ry="2" />
<text  x="454.72" y="1295.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="469" width="6.7" height="15.0" fill="rgb(242,120,12)" rx="2" ry="2" />
<text  x="65.73" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="421.8" y="1973" width="0.1" height="15.0" fill="rgb(246,134,24)" rx="2" ry="2" />
<text  x="424.75" y="1983.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::dotRow (12 samples, 0.08%)</title><rect x="771.4" y="2053" width="1.0" height="15.0" fill="rgb(249,21,26)" rx="2" ry="2" />
<text  x="774.45" y="2063.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (26 samples, 0.17%)</title><rect x="123.8" y="2021" width="2.1" height="15.0" fill="rgb(226,10,21)" rx="2" ry="2" />
<text  x="126.85" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="453.0" y="1013" width="0.1" height="15.0" fill="rgb(239,194,9)" rx="2" ry="2" />
<text  x="455.98" y="1023.5" ></text>
</g>
<g >
<title>expf32x (2 samples, 0.01%)</title><rect x="771.3" y="2053" width="0.1" height="15.0" fill="rgb(239,86,9)" rx="2" ry="2" />
<text  x="774.29" y="2063.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (15 samples, 0.10%)</title><rect x="65.5" y="37" width="1.2" height="15.0" fill="rgb(230,116,19)" rx="2" ry="2" />
<text  x="68.50" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1301" width="0.3" height="15.0" fill="rgb(207,140,11)" rx="2" ry="2" />
<text  x="1186.83" y="1311.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.07%)</title><rect x="1149.7" y="2053" width="0.8" height="15.0" fill="rgb(243,31,54)" rx="2" ry="2" />
<text  x="1152.68" y="2063.5" ></text>
</g>
<g >
<title>torch::autograd::impl::get_autograd_meta (2 samples, 0.01%)</title><rect x="1189.8" y="2053" width="0.2" height="15.0" fill="rgb(222,55,33)" rx="2" ry="2" />
<text  x="1192.84" y="2063.5" ></text>
</g>
<g >
<title>TAnnotator::AnnotateDocument (2,381 samples, 15.95%)</title><rect x="447.5" y="1973" width="188.3" height="15.0" fill="rgb(226,113,18)" rx="2" ry="2" />
<text  x="450.53" y="1983.5" >TAnnotator::AnnotateDocu..</text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::push_back (7 samples, 0.05%)</title><rect x="445.2" y="2005" width="0.6" height="15.0" fill="rgb(205,172,8)" rx="2" ry="2" />
<text  x="448.24" y="2015.5" ></text>
</g>
<g >
<title>c10::detail::make_boxed_from_unboxed_functor&lt;c10::detail::WrapKernelFunction_&lt;long  (2 samples, 0.01%)</title><rect x="76.0" y="2021" width="0.2" height="15.0" fill="rgb(240,130,26)" rx="2" ry="2" />
<text  x="79.02" y="2031.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (34 samples, 0.23%)</title><rect x="680.6" y="2037" width="2.7" height="15.0" fill="rgb(239,108,48)" rx="2" ry="2" />
<text  x="683.60" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1045" width="6.7" height="15.0" fill="rgb(247,66,8)" rx="2" ry="2" />
<text  x="65.73" y="1055.5" ></text>
</g>
<g >
<title>torch::jit::pop (2 samples, 0.01%)</title><rect x="1156.3" y="1957" width="0.2" height="15.0" fill="rgb(220,99,54)" rx="2" ry="2" />
<text  x="1159.32" y="1967.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.01%)</title><rect x="65.3" y="37" width="0.1" height="15.0" fill="rgb(208,228,47)" rx="2" ry="2" />
<text  x="68.26" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="451.7" y="1269" width="0.2" height="15.0" fill="rgb(245,126,34)" rx="2" ry="2" />
<text  x="454.72" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (11 samples, 0.07%)</title><rect x="452.3" y="1637" width="0.8" height="15.0" fill="rgb(230,103,24)" rx="2" ry="2" />
<text  x="455.27" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="452.9" y="1189" width="0.2" height="15.0" fill="rgb(254,94,47)" rx="2" ry="2" />
<text  x="455.91" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1845" width="6.7" height="15.0" fill="rgb(226,202,4)" rx="2" ry="2" />
<text  x="65.73" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="453.0" y="1077" width="0.1" height="15.0" fill="rgb(206,228,1)" rx="2" ry="2" />
<text  x="455.98" y="1087.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (3 samples, 0.02%)</title><rect x="445.3" y="1957" width="0.3" height="15.0" fill="rgb(251,122,34)" rx="2" ry="2" />
<text  x="448.32" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="451.7" y="1157" width="0.2" height="15.0" fill="rgb(237,59,32)" rx="2" ry="2" />
<text  x="454.72" y="1167.5" ></text>
</g>
<g >
<title>torch::from_blob (26 samples, 0.17%)</title><rect x="468.9" y="1925" width="2.0" height="15.0" fill="rgb(249,181,36)" rx="2" ry="2" />
<text  x="471.88" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="949" width="0.4" height="15.0" fill="rgb(245,35,29)" rx="2" ry="2" />
<text  x="1186.44" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="309" width="0.4" height="15.0" fill="rgb(235,169,35)" rx="2" ry="2" />
<text  x="1186.44" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1637" width="0.3" height="15.0" fill="rgb(242,118,25)" rx="2" ry="2" />
<text  x="1186.83" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1183.8" y="2037" width="0.3" height="15.0" fill="rgb(207,73,16)" rx="2" ry="2" />
<text  x="1186.75" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (14 samples, 0.09%)</title><rect x="646.8" y="2005" width="1.1" height="15.0" fill="rgb(226,28,53)" rx="2" ry="2" />
<text  x="649.77" y="2015.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (324 samples, 2.17%)</title><rect x="96.7" y="2021" width="25.6" height="15.0" fill="rgb(224,7,45)" rx="2" ry="2" />
<text  x="99.73" y="2031.5" >o..</text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1061" width="6.7" height="15.0" fill="rgb(232,18,51)" rx="2" ry="2" />
<text  x="65.73" y="1071.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="432.3" y="1925" width="0.2" height="15.0" fill="rgb(252,15,37)" rx="2" ry="2" />
<text  x="435.35" y="1935.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (59 samples, 0.40%)</title><rect x="177.5" y="1925" width="4.7" height="15.0" fill="rgb(254,217,2)" rx="2" ry="2" />
<text  x="180.53" y="1935.5" ></text>
</g>
<g >
<title>operator delete (13 samples, 0.09%)</title><rect x="122.3" y="2021" width="1.1" height="15.0" fill="rgb(207,92,25)" rx="2" ry="2" />
<text  x="125.35" y="2031.5" ></text>
</g>
<g >
<title>c10::TensorImpl::itemsize (2 samples, 0.01%)</title><rect x="68.5" y="37" width="0.2" height="15.0" fill="rgb(251,130,24)" rx="2" ry="2" />
<text  x="71.51" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="451.7" y="1317" width="0.2" height="15.0" fill="rgb(239,184,28)" rx="2" ry="2" />
<text  x="454.72" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="405" width="0.4" height="15.0" fill="rgb(228,89,50)" rx="2" ry="2" />
<text  x="1186.44" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="981" width="0.4" height="15.0" fill="rgb(229,144,3)" rx="2" ry="2" />
<text  x="1186.44" y="991.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1653" width="6.7" height="15.0" fill="rgb(219,218,43)" rx="2" ry="2" />
<text  x="65.73" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="452.7" y="1269" width="0.4" height="15.0" fill="rgb(223,73,6)" rx="2" ry="2" />
<text  x="455.75" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="821" width="0.3" height="15.0" fill="rgb(220,201,19)" rx="2" ry="2" />
<text  x="1186.83" y="831.5" ></text>
</g>
<g >
<title>torch::jit::Object::find_method (2 samples, 0.01%)</title><rect x="471.1" y="1909" width="0.1" height="15.0" fill="rgb(225,131,27)" rx="2" ry="2" />
<text  x="474.09" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="629" width="0.4" height="15.0" fill="rgb(234,191,32)" rx="2" ry="2" />
<text  x="1186.44" y="639.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1477" width="6.7" height="15.0" fill="rgb(229,189,22)" rx="2" ry="2" />
<text  x="65.73" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="451.7" y="885" width="0.2" height="15.0" fill="rgb(244,205,13)" rx="2" ry="2" />
<text  x="454.72" y="895.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="631.9" y="1941" width="0.2" height="15.0" fill="rgb(251,167,24)" rx="2" ry="2" />
<text  x="634.90" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="452.8" y="1237" width="0.3" height="15.0" fill="rgb(224,209,29)" rx="2" ry="2" />
<text  x="455.83" y="1247.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (3 samples, 0.02%)</title><rect x="1185.7" y="2053" width="0.3" height="15.0" fill="rgb(250,7,0)" rx="2" ry="2" />
<text  x="1188.73" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1781" width="6.7" height="15.0" fill="rgb(253,145,30)" rx="2" ry="2" />
<text  x="65.73" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1605" width="0.4" height="15.0" fill="rgb(219,221,46)" rx="2" ry="2" />
<text  x="1186.44" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="933" width="0.3" height="15.0" fill="rgb(221,36,11)" rx="2" ry="2" />
<text  x="1186.83" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="309" width="0.3" height="15.0" fill="rgb(211,80,33)" rx="2" ry="2" />
<text  x="1186.83" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1557" width="0.3" height="15.0" fill="rgb(237,51,25)" rx="2" ry="2" />
<text  x="1186.83" y="1567.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (29 samples, 0.19%)</title><rect x="684.2" y="2037" width="2.3" height="15.0" fill="rgb(226,7,42)" rx="2" ry="2" />
<text  x="687.24" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="451.6" y="1637" width="0.6" height="15.0" fill="rgb(208,107,29)" rx="2" ry="2" />
<text  x="454.56" y="1647.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;::PlainObjectBase&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;float&gt;, Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt; &gt; (24 samples, 0.16%)</title><rect x="409.0" y="1941" width="1.9" height="15.0" fill="rgb(212,219,43)" rx="2" ry="2" />
<text  x="412.03" y="1951.5" ></text>
</g>
<g >
<title>TNewsCluster::CalcImportance (24 samples, 0.16%)</title><rect x="437.2" y="1973" width="1.9" height="15.0" fill="rgb(239,41,24)" rx="2" ry="2" />
<text  x="440.17" y="1983.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="58.8" y="1973" width="0.2" height="15.0" fill="rgb(251,23,6)" rx="2" ry="2" />
<text  x="61.78" y="1983.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.01%)</title><rect x="182.2" y="1941" width="0.2" height="15.0" fill="rgb(233,48,45)" rx="2" ry="2" />
<text  x="185.20" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="709" width="0.4" height="15.0" fill="rgb(218,75,43)" rx="2" ry="2" />
<text  x="1186.44" y="719.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="123.5" y="2021" width="0.2" height="15.0" fill="rgb(245,124,34)" rx="2" ry="2" />
<text  x="126.53" y="2031.5" ></text>
</g>
<g >
<title>c10::Dispatcher::callUnboxed&lt;at::Tensor, at::Tensor const&amp;, long, long, long, long&gt; (26 samples, 0.17%)</title><rect x="465.4" y="1925" width="2.1" height="15.0" fill="rgb(251,219,9)" rx="2" ry="2" />
<text  x="468.40" y="1935.5" ></text>
</g>
<g >
<title>RunFasttextClf (18 samples, 0.12%)</title><rect x="447.8" y="1941" width="1.5" height="15.0" fill="rgb(218,225,27)" rx="2" ry="2" />
<text  x="450.85" y="1951.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_erase (3 samples, 0.02%)</title><rect x="444.5" y="1989" width="0.3" height="15.0" fill="rgb(248,187,43)" rx="2" ry="2" />
<text  x="447.52" y="1999.5" ></text>
</g>
<g >
<title>__libc_start_main (3,514 samples, 23.54%)</title><rect x="168.8" y="2037" width="277.9" height="15.0" fill="rgb(250,27,46)" rx="2" ry="2" />
<text  x="171.84" y="2047.5" >__libc_start_main</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1183.4" y="1797" width="0.4" height="15.0" fill="rgb(233,91,45)" rx="2" ry="2" />
<text  x="1186.36" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7 samples, 0.05%)</title><rect x="424.3" y="1925" width="0.5" height="15.0" fill="rgb(233,117,53)" rx="2" ry="2" />
<text  x="427.28" y="1935.5" ></text>
</g>
<g >
<title>c10::TensorImpl::compute_contiguous (2 samples, 0.01%)</title><rect x="643.8" y="2005" width="0.2" height="15.0" fill="rgb(230,84,19)" rx="2" ry="2" />
<text  x="646.84" y="2015.5" ></text>
</g>
<g >
<title>std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;::emplace&lt;c10::IValue&gt; (2 samples, 0.01%)</title><rect x="649.1" y="1989" width="0.2" height="15.0" fill="rgb(239,132,50)" rx="2" ry="2" />
<text  x="652.14" y="1999.5" ></text>
</g>
<g >
<title>at::detail::make_tensor&lt;c10::TensorImpl, c10::intrusive_ptr&lt;c10::StorageImpl, c10::detail::intrusive_target_default_null_type&lt;c10::StorageImpl&gt; &gt;, c10::DispatchKey&gt; (4 samples, 0.03%)</title><rect x="637.2" y="2037" width="0.3" height="15.0" fill="rgb(249,72,45)" rx="2" ry="2" />
<text  x="640.20" y="2047.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (30 samples, 0.20%)</title><rect x="440.5" y="1989" width="2.4" height="15.0" fill="rgb(206,55,20)" rx="2" ry="2" />
<text  x="443.49" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1183.4" y="1829" width="0.4" height="15.0" fill="rgb(215,87,51)" rx="2" ry="2" />
<text  x="1186.36" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1541" width="6.7" height="15.0" fill="rgb(218,137,6)" rx="2" ry="2" />
<text  x="65.73" y="1551.5" ></text>
</g>
<g >
<title>c10::TensorImpl::TensorImpl (2 samples, 0.01%)</title><rect x="638.7" y="2021" width="0.2" height="15.0" fill="rgb(252,136,52)" rx="2" ry="2" />
<text  x="641.70" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.07%)</title><rect x="452.3" y="1733" width="0.8" height="15.0" fill="rgb(226,75,19)" rx="2" ry="2" />
<text  x="455.27" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.07%)</title><rect x="452.3" y="1717" width="0.8" height="15.0" fill="rgb(244,131,12)" rx="2" ry="2" />
<text  x="455.27" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="181" width="0.3" height="15.0" fill="rgb(229,162,39)" rx="2" ry="2" />
<text  x="1186.83" y="191.5" ></text>
</g>
<g >
<title>kmp_flag_64::wait (2 samples, 0.01%)</title><rect x="671.2" y="2037" width="0.2" height="15.0" fill="rgb(219,227,35)" rx="2" ry="2" />
<text  x="674.20" y="2047.5" ></text>
</g>
<g >
<title>c10::TensorType::isSubtypeOfExt (4 samples, 0.03%)</title><rect x="646.4" y="2005" width="0.4" height="15.0" fill="rgb(242,84,33)" rx="2" ry="2" />
<text  x="649.45" y="2015.5" ></text>
</g>
<g >
<title>c10::intrusive_ptr&lt;c10::TensorImpl, c10::UndefinedTensorImpl&gt;::reset_ (4 samples, 0.03%)</title><rect x="648.6" y="2005" width="0.3" height="15.0" fill="rgb(217,12,52)" rx="2" ry="2" />
<text  x="651.58" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.16%)</title><rect x="451.2" y="1781" width="1.9" height="15.0" fill="rgb(234,222,47)" rx="2" ry="2" />
<text  x="454.24" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1269" width="0.3" height="15.0" fill="rgb(254,61,53)" rx="2" ry="2" />
<text  x="1186.83" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="439.2" y="1893" width="0.3" height="15.0" fill="rgb(246,35,39)" rx="2" ry="2" />
<text  x="442.23" y="1903.5" ></text>
</g>
<g >
<title>TDocument::TDocument (5 samples, 0.03%)</title><rect x="169.5" y="1989" width="0.4" height="15.0" fill="rgb(254,166,50)" rx="2" ry="2" />
<text  x="172.47" y="1999.5" ></text>
</g>
<g >
<title>torch::jit::GraphExecutorImplBase::run (47 samples, 0.31%)</title><rect x="1152.8" y="1989" width="3.7" height="15.0" fill="rgb(244,185,13)" rx="2" ry="2" />
<text  x="1155.76" y="1999.5" ></text>
</g>
<g >
<title>c10::TensorImpl::size (2 samples, 0.01%)</title><rect x="645.3" y="2005" width="0.2" height="15.0" fill="rgb(214,88,47)" rx="2" ry="2" />
<text  x="648.34" y="2015.5" ></text>
</g>
<g >
<title>fasttext::Vector::mul (17 samples, 0.11%)</title><rect x="620.6" y="1941" width="1.3" height="15.0" fill="rgb(252,188,11)" rx="2" ry="2" />
<text  x="623.60" y="1951.5" ></text>
</g>
<g >
<title>std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;::_M_check_len (2 samples, 0.01%)</title><rect x="640.9" y="1989" width="0.2" height="15.0" fill="rgb(218,133,50)" rx="2" ry="2" />
<text  x="643.91" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (155 samples, 1.04%)</title><rect x="58.5" y="2005" width="12.2" height="15.0" fill="rgb(226,18,43)" rx="2" ry="2" />
<text  x="61.46" y="2015.5" ></text>
</g>
<g >
<title>memcmp@plt (2 samples, 0.01%)</title><rect x="68.7" y="37" width="0.1" height="15.0" fill="rgb(224,72,8)" rx="2" ry="2" />
<text  x="71.66" y="47.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (4 samples, 0.03%)</title><rect x="436.1" y="1925" width="0.4" height="15.0" fill="rgb(245,18,36)" rx="2" ry="2" />
<text  x="439.14" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25 samples, 0.17%)</title><rect x="451.2" y="1845" width="1.9" height="15.0" fill="rgb(216,159,45)" rx="2" ry="2" />
<text  x="454.17" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="373" width="0.4" height="15.0" fill="rgb(215,21,30)" rx="2" ry="2" />
<text  x="1186.44" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="452.6" y="1317" width="0.5" height="15.0" fill="rgb(226,133,34)" rx="2" ry="2" />
<text  x="455.59" y="1327.5" ></text>
</g>
<g >
<title>c10::IValue::toTensor (2 samples, 0.01%)</title><rect x="1152.0" y="1957" width="0.1" height="15.0" fill="rgb(223,220,32)" rx="2" ry="2" />
<text  x="1154.97" y="1967.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.03%)</title><rect x="437.6" y="1941" width="0.4" height="15.0" fill="rgb(229,204,31)" rx="2" ry="2" />
<text  x="440.65" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="581" width="6.7" height="15.0" fill="rgb(236,212,52)" rx="2" ry="2" />
<text  x="65.73" y="591.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (4 samples, 0.03%)</title><rect x="67.2" y="53" width="0.3" height="15.0" fill="rgb(250,100,1)" rx="2" ry="2" />
<text  x="70.16" y="63.5" ></text>
</g>
<g >
<title>std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;::emplace_back&lt;at::Tensor&gt; (2 samples, 0.01%)</title><rect x="641.1" y="1989" width="0.1" height="15.0" fill="rgb(220,136,30)" rx="2" ry="2" />
<text  x="644.07" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.3" y="1941" width="0.5" height="15.0" fill="rgb(220,164,29)" rx="2" ry="2" />
<text  x="1186.28" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="245" width="0.3" height="15.0" fill="rgb(210,9,12)" rx="2" ry="2" />
<text  x="1186.83" y="255.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (4 samples, 0.03%)</title><rect x="69.9" y="1989" width="0.3" height="15.0" fill="rgb(222,1,6)" rx="2" ry="2" />
<text  x="72.93" y="1999.5" ></text>
</g>
<g >
<title>nlohmann::detail::parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::parse (151 samples, 1.01%)</title><rect x="170.4" y="1973" width="12.0" height="15.0" fill="rgb(212,191,43)" rx="2" ry="2" />
<text  x="173.42" y="1983.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="440.2" y="2005" width="0.2" height="15.0" fill="rgb(222,6,15)" rx="2" ry="2" />
<text  x="443.18" y="2015.5" ></text>
</g>
<g >
<title>mkl_serv_cpu_detect (2 samples, 0.01%)</title><rect x="678.5" y="2037" width="0.2" height="15.0" fill="rgb(213,35,49)" rx="2" ry="2" />
<text  x="681.55" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1509" width="6.7" height="15.0" fill="rgb(214,217,50)" rx="2" ry="2" />
<text  x="65.73" y="1519.5" ></text>
</g>
<g >
<title>cfree (3 samples, 0.02%)</title><rect x="645.6" y="2005" width="0.2" height="15.0" fill="rgb(207,109,10)" rx="2" ry="2" />
<text  x="648.58" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.03%)</title><rect x="745.3" y="2021" width="0.3" height="15.0" fill="rgb(230,57,49)" rx="2" ry="2" />
<text  x="748.28" y="2031.5" ></text>
</g>
<g >
<title>at::TypeDefault::slice_Tensor (6 samples, 0.04%)</title><rect x="465.8" y="1893" width="0.5" height="15.0" fill="rgb(241,1,45)" rx="2" ry="2" />
<text  x="468.79" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="451.6" y="1589" width="0.6" height="15.0" fill="rgb(240,137,12)" rx="2" ry="2" />
<text  x="454.64" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1253" width="0.3" height="15.0" fill="rgb(237,34,31)" rx="2" ry="2" />
<text  x="1186.83" y="1263.5" ></text>
</g>
<g >
<title>torch::autograd::make_variable_differentiable_view (3 samples, 0.02%)</title><rect x="466.9" y="1877" width="0.2" height="15.0" fill="rgb(217,23,41)" rx="2" ry="2" />
<text  x="469.90" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.3" y="1989" width="0.5" height="15.0" fill="rgb(246,217,0)" rx="2" ry="2" />
<text  x="1186.28" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1797" width="6.7" height="15.0" fill="rgb(232,17,2)" rx="2" ry="2" />
<text  x="65.73" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.04%)</title><rect x="1183.3" y="2053" width="0.5" height="15.0" fill="rgb(234,162,14)" rx="2" ry="2" />
<text  x="1186.28" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="638.5" y="2021" width="0.2" height="15.0" fill="rgb(238,87,27)" rx="2" ry="2" />
<text  x="641.46" y="2031.5" ></text>
</g>
<g >
<title>all (14,925 samples, 100%)</title><rect x="10.0" y="2085" width="1180.0" height="15.0" fill="rgb(238,82,43)" rx="2" ry="2" />
<text  x="13.00" y="2095.5" ></text>
</g>
<g >
<title>memcpy@plt (7 samples, 0.05%)</title><rect x="1029.7" y="2053" width="0.5" height="15.0" fill="rgb(211,62,53)" rx="2" ry="2" />
<text  x="1032.66" y="2063.5" ></text>
</g>
<g >
<title>at::from_blob (22 samples, 0.15%)</title><rect x="468.9" y="1909" width="1.7" height="15.0" fill="rgb(230,104,13)" rx="2" ry="2" />
<text  x="471.88" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="439.4" y="1797" width="0.1" height="15.0" fill="rgb(207,91,32)" rx="2" ry="2" />
<text  x="442.39" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="853" width="0.4" height="15.0" fill="rgb(209,204,34)" rx="2" ry="2" />
<text  x="1186.44" y="863.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (2 samples, 0.01%)</title><rect x="442.7" y="1941" width="0.2" height="15.0" fill="rgb(246,73,3)" rx="2" ry="2" />
<text  x="445.71" y="1951.5" ></text>
</g>
<g >
<title>nlohmann::operator&gt;&gt; (151 samples, 1.01%)</title><rect x="170.4" y="1989" width="12.0" height="15.0" fill="rgb(215,188,3)" rx="2" ry="2" />
<text  x="173.42" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="229" width="0.4" height="15.0" fill="rgb(218,47,34)" rx="2" ry="2" />
<text  x="1186.44" y="239.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (2,390 samples, 16.01%)</title><rect x="447.1" y="2021" width="188.9" height="15.0" fill="rgb(232,132,30)" rx="2" ry="2" />
<text  x="450.05" y="2031.5" >std::__future_base::_Sta..</text>
</g>
<g >
<title>[unknown] (107 samples, 0.72%)</title><rect x="61.0" y="1957" width="8.5" height="15.0" fill="rgb(232,114,54)" rx="2" ry="2" />
<text  x="63.99" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (49 samples, 0.33%)</title><rect x="62.8" y="53" width="3.9" height="15.0" fill="rgb(213,112,26)" rx="2" ry="2" />
<text  x="65.81" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="439.4" y="1669" width="0.1" height="15.0" fill="rgb(234,68,36)" rx="2" ry="2" />
<text  x="442.39" y="1679.5" ></text>
</g>
<g >
<title>torch::autograd::gatherFunctions (2 samples, 0.01%)</title><rect x="743.5" y="2005" width="0.2" height="15.0" fill="rgb(208,99,34)" rx="2" ry="2" />
<text  x="746.54" y="2015.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (3 samples, 0.02%)</title><rect x="419.4" y="1957" width="0.2" height="15.0" fill="rgb(205,21,34)" rx="2" ry="2" />
<text  x="422.38" y="1967.5" ></text>
</g>
<g >
<title>c10::OperatorHandle::callUnboxed&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Storage, long, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt; &gt; (11 samples, 0.07%)</title><rect x="469.2" y="1877" width="0.9" height="15.0" fill="rgb(239,36,27)" rx="2" ry="2" />
<text  x="472.19" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;fasttext::entry, std::allocator&lt;fasttext::entry&gt; &gt;::_M_realloc_insert&lt;fasttext::entry const&amp;&gt; (2 samples, 0.01%)</title><rect x="126.9" y="2021" width="0.1" height="15.0" fill="rgb(244,66,36)" rx="2" ry="2" />
<text  x="129.85" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="439.4" y="1605" width="0.1" height="15.0" fill="rgb(246,40,16)" rx="2" ry="2" />
<text  x="442.39" y="1615.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (3 samples, 0.02%)</title><rect x="651.5" y="2037" width="0.2" height="15.0" fill="rgb(249,155,48)" rx="2" ry="2" />
<text  x="654.51" y="2047.5" ></text>
</g>
<g >
<title>c10::function_ref&lt;void  (2 samples, 0.01%)</title><rect x="758.2" y="2037" width="0.2" height="15.0" fill="rgb(237,65,23)" rx="2" ry="2" />
<text  x="761.24" y="2047.5" ></text>
</g>
<g >
<title>torch::autograd::impl::grad_accumulator (3 samples, 0.02%)</title><rect x="127.1" y="2021" width="0.2" height="15.0" fill="rgb(230,67,25)" rx="2" ry="2" />
<text  x="130.09" y="2031.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const&amp;&gt; (2 samples, 0.01%)</title><rect x="446.3" y="1829" width="0.2" height="15.0" fill="rgb(214,14,44)" rx="2" ry="2" />
<text  x="449.34" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1061" width="0.3" height="15.0" fill="rgb(242,85,29)" rx="2" ry="2" />
<text  x="1186.83" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="452.8" y="1221" width="0.3" height="15.0" fill="rgb(207,190,34)" rx="2" ry="2" />
<text  x="455.83" y="1231.5" ></text>
</g>
<g >
<title>at::TensorIterator::compute_types (2 samples, 0.01%)</title><rect x="68.3" y="37" width="0.2" height="15.0" fill="rgb(240,62,22)" rx="2" ry="2" />
<text  x="71.35" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="549" width="0.4" height="15.0" fill="rgb(228,45,21)" rx="2" ry="2" />
<text  x="1186.44" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.07%)</title><rect x="452.4" y="1525" width="0.7" height="15.0" fill="rgb(209,214,36)" rx="2" ry="2" />
<text  x="455.35" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1365" width="0.4" height="15.0" fill="rgb(216,100,20)" rx="2" ry="2" />
<text  x="1186.44" y="1375.5" ></text>
</g>
<g >
<title>@plt (2 samples, 0.01%)</title><rect x="10.0" y="2053" width="0.2" height="15.0" fill="rgb(253,71,29)" rx="2" ry="2" />
<text  x="13.00" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1653" width="0.3" height="15.0" fill="rgb(225,66,0)" rx="2" ry="2" />
<text  x="1186.83" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11 samples, 0.07%)</title><rect x="452.3" y="1653" width="0.8" height="15.0" fill="rgb(250,109,52)" rx="2" ry="2" />
<text  x="455.27" y="1663.5" ></text>
</g>
<g >
<title>rocksdb::CompactionPicker::SanitizeCompactionInputFilesForAllLevels (2 samples, 0.01%)</title><rect x="1151.1" y="2053" width="0.2" height="15.0" fill="rgb(206,148,17)" rx="2" ry="2" />
<text  x="1154.10" y="2063.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::load (8 samples, 0.05%)</title><rect x="821.3" y="2053" width="0.7" height="15.0" fill="rgb(222,169,52)" rx="2" ry="2" />
<text  x="824.33" y="2063.5" ></text>
</g>
<g >
<title>at::native::empty_cpu (3 samples, 0.02%)</title><rect x="639.7" y="1973" width="0.3" height="15.0" fill="rgb(248,103,27)" rx="2" ry="2" />
<text  x="642.73" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="451.9" y="1445" width="0.3" height="15.0" fill="rgb(220,149,17)" rx="2" ry="2" />
<text  x="454.88" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="451.7" y="1077" width="0.2" height="15.0" fill="rgb(216,14,41)" rx="2" ry="2" />
<text  x="454.72" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="452.6" y="1349" width="0.5" height="15.0" fill="rgb(224,143,2)" rx="2" ry="2" />
<text  x="455.59" y="1359.5" ></text>
</g>
<g >
<title>at::GradMode::is_enabled (2 samples, 0.01%)</title><rect x="465.6" y="1893" width="0.2" height="15.0" fill="rgb(212,78,43)" rx="2" ry="2" />
<text  x="468.63" y="1903.5" ></text>
</g>
<g >
<title>std::future&lt;std::optional&lt;TDbDocument&gt; &gt;::get (3 samples, 0.02%)</title><rect x="182.5" y="1989" width="0.3" height="15.0" fill="rgb(212,146,29)" rx="2" ry="2" />
<text  x="185.51" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="451.7" y="997" width="0.2" height="15.0" fill="rgb(216,122,9)" rx="2" ry="2" />
<text  x="454.72" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1077" width="0.3" height="15.0" fill="rgb(226,219,52)" rx="2" ry="2" />
<text  x="1186.83" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="451.6" y="1557" width="0.6" height="15.0" fill="rgb(251,223,52)" rx="2" ry="2" />
<text  x="454.64" y="1567.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::future&lt;std::result_of&lt;std::optional&lt;TDbDocument&gt;  (3 samples, 0.02%)</title><rect x="50.8" y="2021" width="0.2" height="15.0" fill="rgb(208,13,26)" rx="2" ry="2" />
<text  x="53.80" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1413" width="0.3" height="15.0" fill="rgb(206,153,18)" rx="2" ry="2" />
<text  x="1186.83" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1397" width="0.3" height="15.0" fill="rgb(238,12,45)" rx="2" ry="2" />
<text  x="1186.83" y="1407.5" ></text>
</g>
<g >
<title>torch::jit::GraphFunction::operator (66 samples, 0.44%)</title><rect x="1151.7" y="2005" width="5.3" height="15.0" fill="rgb(208,157,4)" rx="2" ry="2" />
<text  x="1154.73" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="451.7" y="1189" width="0.2" height="15.0" fill="rgb(239,106,37)" rx="2" ry="2" />
<text  x="454.72" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1333" width="0.3" height="15.0" fill="rgb(229,0,54)" rx="2" ry="2" />
<text  x="1186.83" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="452.4" y="1477" width="0.7" height="15.0" fill="rgb(238,94,23)" rx="2" ry="2" />
<text  x="455.43" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="997" width="0.4" height="15.0" fill="rgb(243,140,12)" rx="2" ry="2" />
<text  x="1186.44" y="1007.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (9 samples, 0.06%)</title><rect x="423.6" y="1925" width="0.7" height="15.0" fill="rgb(234,181,3)" rx="2" ry="2" />
<text  x="426.57" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="421" width="6.7" height="15.0" fill="rgb(244,177,46)" rx="2" ry="2" />
<text  x="65.73" y="431.5" ></text>
</g>
<g >
<title>torch::jit::(anonymous namespace)::{lambda (3 samples, 0.02%)</title><rect x="1153.3" y="1957" width="0.3" height="15.0" fill="rgb(218,134,49)" rx="2" ry="2" />
<text  x="1156.32" y="1967.5" ></text>
</g>
<g >
<title>mkl_blas_avx512_xsgemv (34 samples, 0.23%)</title><rect x="675.7" y="2021" width="2.7" height="15.0" fill="rgb(253,83,45)" rx="2" ry="2" />
<text  x="678.70" y="2031.5" ></text>
</g>
<g >
<title>c10::Dispatcher::callUnboxedWithDispatchKey&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Storage, long, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt; &gt; (11 samples, 0.07%)</title><rect x="469.2" y="1845" width="0.9" height="15.0" fill="rgb(216,141,47)" rx="2" ry="2" />
<text  x="472.19" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="533" width="0.3" height="15.0" fill="rgb(205,29,49)" rx="2" ry="2" />
<text  x="1186.83" y="543.5" ></text>
</g>
<g >
<title>torch::autograd::SavedVariable::SavedVariable (2 samples, 0.01%)</title><rect x="646.3" y="1989" width="0.1" height="15.0" fill="rgb(223,45,29)" rx="2" ry="2" />
<text  x="649.29" y="1999.5" ></text>
</g>
<g >
<title>at::TensorIterator::build (2 samples, 0.01%)</title><rect x="70.8" y="1989" width="0.2" height="15.0" fill="rgb(215,46,54)" rx="2" ry="2" />
<text  x="73.80" y="1999.5" ></text>
</g>
<g >
<title>at::CPUType::empty_memory_format (6 samples, 0.04%)</title><rect x="760.8" y="2021" width="0.4" height="15.0" fill="rgb(212,53,31)" rx="2" ry="2" />
<text  x="763.77" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1125" width="0.3" height="15.0" fill="rgb(237,151,17)" rx="2" ry="2" />
<text  x="1186.83" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1285" width="0.4" height="15.0" fill="rgb(211,94,9)" rx="2" ry="2" />
<text  x="1186.44" y="1295.5" ></text>
</g>
<g >
<title>__kmp_hardware_timestamp (2 samples, 0.01%)</title><rect x="127.6" y="2037" width="0.2" height="15.0" fill="rgb(224,134,6)" rx="2" ry="2" />
<text  x="130.64" y="2047.5" ></text>
</g>
<g >
<title>caffe2::TypeMeta::_typeMetaDataInstance&lt;short&gt; (2 samples, 0.01%)</title><rect x="759.2" y="1989" width="0.1" height="15.0" fill="rgb(209,144,52)" rx="2" ry="2" />
<text  x="762.19" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="789" width="0.3" height="15.0" fill="rgb(247,88,33)" rx="2" ry="2" />
<text  x="1186.83" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::construct&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const&amp;&gt; (3 samples, 0.02%)</title><rect x="445.3" y="1989" width="0.3" height="15.0" fill="rgb(229,215,50)" rx="2" ry="2" />
<text  x="448.32" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="597" width="6.7" height="15.0" fill="rgb(206,102,9)" rx="2" ry="2" />
<text  x="65.73" y="607.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="389" width="6.7" height="15.0" fill="rgb(247,18,48)" rx="2" ry="2" />
<text  x="65.73" y="399.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::add (6 samples, 0.04%)</title><rect x="170.9" y="1941" width="0.5" height="15.0" fill="rgb(226,210,50)" rx="2" ry="2" />
<text  x="173.89" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.03%)</title><rect x="1150.1" y="2037" width="0.4" height="15.0" fill="rgb(234,88,11)" rx="2" ry="2" />
<text  x="1153.07" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::vector (4 samples, 0.03%)</title><rect x="446.3" y="1909" width="0.4" height="15.0" fill="rgb(229,18,22)" rx="2" ry="2" />
<text  x="449.34" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="901" width="6.7" height="15.0" fill="rgb(227,198,23)" rx="2" ry="2" />
<text  x="65.73" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="533" width="0.4" height="15.0" fill="rgb(254,30,9)" rx="2" ry="2" />
<text  x="1186.44" y="543.5" ></text>
</g>
<g >
<title>at::native::div (3 samples, 0.02%)</title><rect x="636.2" y="2021" width="0.2" height="15.0" fill="rgb(249,115,39)" rx="2" ry="2" />
<text  x="639.17" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1493" width="6.7" height="15.0" fill="rgb(243,58,7)" rx="2" ry="2" />
<text  x="65.73" y="1503.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::operator[]&lt;char const&gt; (4 samples, 0.03%)</title><rect x="444.9" y="2005" width="0.3" height="15.0" fill="rgb(207,52,21)" rx="2" ry="2" />
<text  x="447.92" y="2015.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (670 samples, 4.49%)</title><rect x="1084.1" y="2053" width="52.9" height="15.0" fill="rgb(244,108,27)" rx="2" ry="2" />
<text  x="1087.06" y="2063.5" >onmt:..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="452.8" y="1205" width="0.3" height="15.0" fill="rgb(219,219,8)" rx="2" ry="2" />
<text  x="455.83" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1221" width="0.3" height="15.0" fill="rgb(214,99,45)" rx="2" ry="2" />
<text  x="1186.83" y="1231.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_insert_unique&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.01%)</title><rect x="436.7" y="1957" width="0.2" height="15.0" fill="rgb(222,35,11)" rx="2" ry="2" />
<text  x="439.70" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1253" width="6.7" height="15.0" fill="rgb(233,22,22)" rx="2" ry="2" />
<text  x="65.73" y="1263.5" ></text>
</g>
<g >
<title>fasttext::Vector::addVector (10 samples, 0.07%)</title><rect x="619.8" y="1941" width="0.8" height="15.0" fill="rgb(223,212,30)" rx="2" ry="2" />
<text  x="622.81" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1413" width="0.4" height="15.0" fill="rgb(216,70,8)" rx="2" ry="2" />
<text  x="1186.44" y="1423.5" ></text>
</g>
<g >
<title>c10::OperatorHandle::callUnboxed&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;&gt; (6 samples, 0.04%)</title><rect x="471.6" y="1893" width="0.5" height="15.0" fill="rgb(241,200,33)" rx="2" ry="2" />
<text  x="474.64" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="452.6" y="1301" width="0.5" height="15.0" fill="rgb(229,27,10)" rx="2" ry="2" />
<text  x="455.59" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1621" width="0.3" height="15.0" fill="rgb(231,59,39)" rx="2" ry="2" />
<text  x="1186.83" y="1631.5" ></text>
</g>
<g >
<title>c10::StorageImpl::~StorageImpl (3 samples, 0.02%)</title><rect x="638.5" y="2037" width="0.2" height="15.0" fill="rgb(236,159,44)" rx="2" ry="2" />
<text  x="641.46" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (2 samples, 0.01%)</title><rect x="74.7" y="2005" width="0.1" height="15.0" fill="rgb(245,150,2)" rx="2" ry="2" />
<text  x="77.67" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="261" width="6.7" height="15.0" fill="rgb(252,123,35)" rx="2" ry="2" />
<text  x="65.73" y="271.5" ></text>
</g>
<g >
<title>[unknown] (139 samples, 0.93%)</title><rect x="58.8" y="1989" width="11.0" height="15.0" fill="rgb(217,191,41)" rx="2" ry="2" />
<text  x="61.78" y="1999.5" ></text>
</g>
<g >
<title>c10::TensorImpl::TensorImpl (2 samples, 0.01%)</title><rect x="643.7" y="2005" width="0.1" height="15.0" fill="rgb(212,59,27)" rx="2" ry="2" />
<text  x="646.68" y="2015.5" ></text>
</g>
<g >
<title>torch::autograd::impl::set_gradient_edge (2 samples, 0.01%)</title><rect x="744.7" y="1973" width="0.2" height="15.0" fill="rgb(249,36,29)" rx="2" ry="2" />
<text  x="747.72" y="1983.5" ></text>
</g>
<g >
<title>operator delete@plt (5 samples, 0.03%)</title><rect x="731.7" y="2037" width="0.4" height="15.0" fill="rgb(251,218,30)" rx="2" ry="2" />
<text  x="734.68" y="2047.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::mm (2 samples, 0.01%)</title><rect x="642.7" y="1989" width="0.1" height="15.0" fill="rgb(247,135,33)" rx="2" ry="2" />
<text  x="645.65" y="1999.5" ></text>
</g>
<g >
<title>TAlexaAgencyRating::ScoreUrl (60 samples, 0.40%)</title><rect x="424.8" y="1941" width="4.8" height="15.0" fill="rgb(207,137,36)" rx="2" ry="2" />
<text  x="427.84" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1557" width="0.4" height="15.0" fill="rgb(217,222,12)" rx="2" ry="2" />
<text  x="1186.44" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="452.4" y="1493" width="0.7" height="15.0" fill="rgb(248,173,39)" rx="2" ry="2" />
<text  x="455.43" y="1503.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (19 samples, 0.13%)</title><rect x="440.7" y="1925" width="1.5" height="15.0" fill="rgb(231,79,17)" rx="2" ry="2" />
<text  x="443.73" y="1935.5" ></text>
</g>
<g >
<title>TSlinkClustering::Cluster (2,995 samples, 20.07%)</title><rect x="182.9" y="1989" width="236.8" height="15.0" fill="rgb(235,67,0)" rx="2" ry="2" />
<text  x="185.91" y="1999.5" >TSlinkClustering::Cluster</text>
</g>
<g >
<title>[unknown] (6 samples, 0.04%)</title><rect x="639.3" y="1989" width="0.4" height="15.0" fill="rgb(222,100,54)" rx="2" ry="2" />
<text  x="642.25" y="1999.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getSubwords (3 samples, 0.02%)</title><rect x="617.4" y="1941" width="0.2" height="15.0" fill="rgb(249,67,13)" rx="2" ry="2" />
<text  x="620.35" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1525" width="0.4" height="15.0" fill="rgb(246,69,32)" rx="2" ry="2" />
<text  x="1186.44" y="1535.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="549" width="6.7" height="15.0" fill="rgb(247,6,19)" rx="2" ry="2" />
<text  x="65.73" y="559.5" ></text>
</g>
<g >
<title>DetectCategory (26 samples, 0.17%)</title><rect x="447.8" y="1957" width="2.1" height="15.0" fill="rgb(253,115,53)" rx="2" ry="2" />
<text  x="450.85" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="709" width="6.7" height="15.0" fill="rgb(231,181,36)" rx="2" ry="2" />
<text  x="65.73" y="719.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.02%)</title><rect x="731.4" y="2037" width="0.3" height="15.0" fill="rgb(215,178,18)" rx="2" ry="2" />
<text  x="734.44" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="439.4" y="1589" width="0.1" height="15.0" fill="rgb(218,125,36)" rx="2" ry="2" />
<text  x="442.39" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="451.7" y="981" width="0.2" height="15.0" fill="rgb(214,160,19)" rx="2" ry="2" />
<text  x="454.72" y="991.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (520 samples, 3.48%)</title><rect x="822.0" y="2053" width="41.1" height="15.0" fill="rgb(222,180,11)" rx="2" ry="2" />
<text  x="824.97" y="2063.5" >fas..</text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="277" width="6.7" height="15.0" fill="rgb(213,89,40)" rx="2" ry="2" />
<text  x="65.73" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1301" width="0.4" height="15.0" fill="rgb(218,90,47)" rx="2" ry="2" />
<text  x="1186.44" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="451.7" y="1349" width="0.2" height="15.0" fill="rgb(212,117,6)" rx="2" ry="2" />
<text  x="454.72" y="1359.5" ></text>
</g>
<g >
<title>at::checked_dense_tensor_unwrap (2 samples, 0.01%)</title><rect x="469.7" y="1765" width="0.2" height="15.0" fill="rgb(211,196,51)" rx="2" ry="2" />
<text  x="472.75" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="439.4" y="1765" width="0.1" height="15.0" fill="rgb(240,97,42)" rx="2" ry="2" />
<text  x="442.39" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_insert_unique&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (20 samples, 0.13%)</title><rect x="432.5" y="1941" width="1.6" height="15.0" fill="rgb(208,92,40)" rx="2" ry="2" />
<text  x="435.51" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1141" width="0.4" height="15.0" fill="rgb(220,60,54)" rx="2" ry="2" />
<text  x="1186.44" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (83 samples, 0.56%)</title><rect x="62.7" y="133" width="6.6" height="15.0" fill="rgb(236,3,16)" rx="2" ry="2" />
<text  x="65.73" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (13 samples, 0.09%)</title><rect x="428.6" y="1925" width="1.0" height="15.0" fill="rgb(234,42,18)" rx="2" ry="2" />
<text  x="431.55" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="261" width="0.3" height="15.0" fill="rgb(205,63,24)" rx="2" ry="2" />
<text  x="1186.83" y="271.5" ></text>
</g>
<g >
<title>__kmp_invoke_microtask (518 samples, 3.47%)</title><rect x="127.8" y="2021" width="41.0" height="15.0" fill="rgb(231,229,39)" rx="2" ry="2" />
<text  x="130.80" y="2031.5" >__k..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.05%)</title><rect x="451.6" y="1669" width="0.6" height="15.0" fill="rgb(238,171,5)" rx="2" ry="2" />
<text  x="454.56" y="1679.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (474 samples, 3.18%)</title><rect x="694.0" y="2037" width="37.4" height="15.0" fill="rgb(229,168,22)" rx="2" ry="2" />
<text  x="696.97" y="2047.5" >onm..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1013" width="0.3" height="15.0" fill="rgb(213,174,31)" rx="2" ry="2" />
<text  x="1186.83" y="1023.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1525" width="6.7" height="15.0" fill="rgb(246,79,3)" rx="2" ry="2" />
<text  x="65.73" y="1535.5" ></text>
</g>
<g >
<title>TNewsCluster::SortByWeights (2 samples, 0.01%)</title><rect x="439.8" y="1973" width="0.1" height="15.0" fill="rgb(206,26,52)" rx="2" ry="2" />
<text  x="442.78" y="1983.5" ></text>
</g>
<g >
<title>c10::TensorImpl::TensorImpl (2 samples, 0.01%)</title><rect x="69.8" y="1989" width="0.1" height="15.0" fill="rgb(209,46,11)" rx="2" ry="2" />
<text  x="72.77" y="1999.5" ></text>
</g>
<g >
<title>at::native::norm (4 samples, 0.03%)</title><rect x="1154.6" y="1893" width="0.3" height="15.0" fill="rgb(235,192,26)" rx="2" ry="2" />
<text  x="1157.58" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="453" width="0.3" height="15.0" fill="rgb(216,67,34)" rx="2" ry="2" />
<text  x="1186.83" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="452.0" y="1349" width="0.2" height="15.0" fill="rgb(224,2,45)" rx="2" ry="2" />
<text  x="455.04" y="1359.5" ></text>
</g>
<g >
<title>std::vector&lt;torch::autograd::Edge, std::allocator&lt;torch::autograd::Edge&gt; &gt;::_M_emplace_back_aux&lt;torch::autograd::Edge&gt; (3 samples, 0.02%)</title><rect x="645.9" y="2005" width="0.2" height="15.0" fill="rgb(215,80,23)" rx="2" ry="2" />
<text  x="648.90" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="85" width="0.3" height="15.0" fill="rgb(252,170,34)" rx="2" ry="2" />
<text  x="1186.83" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="452.0" y="1333" width="0.2" height="15.0" fill="rgb(215,126,16)" rx="2" ry="2" />
<text  x="455.04" y="1343.5" ></text>
</g>
<g >
<title>TDbDocument::~TDbDocument (4 samples, 0.03%)</title><rect x="421.4" y="1989" width="0.3" height="15.0" fill="rgb(208,198,6)" rx="2" ry="2" />
<text  x="424.36" y="1999.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_state&lt;std::_Bind&lt;std::optional&lt;TDbDocument&gt;  (3 samples, 0.02%)</title><rect x="50.4" y="2037" width="0.2" height="15.0" fill="rgb(254,199,33)" rx="2" ry="2" />
<text  x="53.40" y="2047.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (6 samples, 0.04%)</title><rect x="67.8" y="85" width="0.5" height="15.0" fill="rgb(222,78,19)" rx="2" ry="2" />
<text  x="70.79" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1493" width="0.4" height="15.0" fill="rgb(226,143,25)" rx="2" ry="2" />
<text  x="1186.44" y="1503.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const&amp;&gt; (4 samples, 0.03%)</title><rect x="446.3" y="1941" width="0.4" height="15.0" fill="rgb(241,6,24)" rx="2" ry="2" />
<text  x="449.34" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="197" width="0.3" height="15.0" fill="rgb(212,20,11)" rx="2" ry="2" />
<text  x="1186.83" y="207.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="933" width="6.7" height="15.0" fill="rgb(223,6,17)" rx="2" ry="2" />
<text  x="65.73" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="789" width="0.4" height="15.0" fill="rgb(212,177,23)" rx="2" ry="2" />
<text  x="1186.44" y="799.5" ></text>
</g>
<g >
<title>at::native::as_strided_tensorimpl (2 samples, 0.01%)</title><rect x="646.8" y="1989" width="0.1" height="15.0" fill="rgb(232,158,29)" rx="2" ry="2" />
<text  x="649.77" y="1999.5" ></text>
</g>
<g >
<title>torch::autograd::generated::MmBackward::~MmBackward (7 samples, 0.05%)</title><rect x="743.7" y="2037" width="0.5" height="15.0" fill="rgb(248,191,10)" rx="2" ry="2" />
<text  x="746.70" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="1205" width="0.3" height="15.0" fill="rgb(221,109,16)" rx="2" ry="2" />
<text  x="1186.83" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1183.8" y="1749" width="0.3" height="15.0" fill="rgb(247,119,16)" rx="2" ry="2" />
<text  x="1186.75" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1077" width="6.7" height="15.0" fill="rgb(222,70,17)" rx="2" ry="2" />
<text  x="65.73" y="1087.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="438.2" y="1957" width="0.2" height="15.0" fill="rgb(246,114,20)" rx="2" ry="2" />
<text  x="441.20" y="1967.5" ></text>
</g>
<g >
<title>c10::IValue::type (5 samples, 0.03%)</title><rect x="1152.1" y="1957" width="0.4" height="15.0" fill="rgb(254,52,34)" rx="2" ry="2" />
<text  x="1155.13" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="869" width="0.4" height="15.0" fill="rgb(208,109,9)" rx="2" ry="2" />
<text  x="1186.44" y="879.5" ></text>
</g>
<g >
<title>[unknown] (7 samples, 0.05%)</title><rect x="744.4" y="2005" width="0.6" height="15.0" fill="rgb(231,202,28)" rx="2" ry="2" />
<text  x="747.41" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1861" width="6.7" height="15.0" fill="rgb(246,176,2)" rx="2" ry="2" />
<text  x="65.73" y="1871.5" ></text>
</g>
<g >
<title>TDbDocument::operator= (6 samples, 0.04%)</title><rect x="420.3" y="1941" width="0.4" height="15.0" fill="rgb(244,63,15)" rx="2" ry="2" />
<text  x="423.25" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="451.7" y="1205" width="0.2" height="15.0" fill="rgb(230,136,30)" rx="2" ry="2" />
<text  x="454.72" y="1215.5" ></text>
</g>
<g >
<title>[unknown] (132 samples, 0.88%)</title><rect x="59.1" y="1973" width="10.4" height="15.0" fill="rgb(241,86,5)" rx="2" ry="2" />
<text  x="62.10" y="1983.5" ></text>
</g>
<g >
<title>std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt;::_M_realloc_insert&lt;TDbDocument const&amp;&gt; (2 samples, 0.01%)</title><rect x="183.1" y="1957" width="0.2" height="15.0" fill="rgb(228,150,45)" rx="2" ry="2" />
<text  x="186.15" y="1967.5" ></text>
</g>
<g >
<title>torch::autograd::make_variable_differentiable_view (2 samples, 0.01%)</title><rect x="642.9" y="1989" width="0.1" height="15.0" fill="rgb(225,153,4)" rx="2" ry="2" />
<text  x="645.89" y="1999.5" ></text>
</g>
<g >
<title>torch::autograd::DifferentiableViewMeta::requires_grad (3 samples, 0.02%)</title><rect x="742.1" y="2037" width="0.3" height="15.0" fill="rgb(208,117,7)" rx="2" ry="2" />
<text  x="745.11" y="2047.5" ></text>
</g>
<g >
<title>torch::jit::GraphFunction::run (69 samples, 0.46%)</title><rect x="1151.5" y="2037" width="5.5" height="15.0" fill="rgb(234,150,50)" rx="2" ry="2" />
<text  x="1154.50" y="2047.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (7 samples, 0.05%)</title><rect x="745.8" y="2037" width="0.5" height="15.0" fill="rgb(218,199,40)" rx="2" ry="2" />
<text  x="748.75" y="2047.5" ></text>
</g>
<g >
<title>c10::Dispatcher::callUnboxed&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (4 samples, 0.03%)</title><rect x="470.1" y="1893" width="0.3" height="15.0" fill="rgb(245,196,31)" rx="2" ry="2" />
<text  x="473.06" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="451.7" y="1237" width="0.2" height="15.0" fill="rgb(208,90,22)" rx="2" ry="2" />
<text  x="454.72" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1445" width="0.4" height="15.0" fill="rgb(218,139,17)" rx="2" ry="2" />
<text  x="1186.44" y="1455.5" ></text>
</g>
<g >
<title>onmt::add_final_token&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (4 samples, 0.03%)</title><rect x="73.4" y="2005" width="0.3" height="15.0" fill="rgb(206,218,13)" rx="2" ry="2" />
<text  x="76.41" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25 samples, 0.17%)</title><rect x="451.2" y="1925" width="1.9" height="15.0" fill="rgb(207,119,47)" rx="2" ry="2" />
<text  x="454.17" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1013" width="6.7" height="15.0" fill="rgb(224,46,0)" rx="2" ry="2" />
<text  x="65.73" y="1023.5" ></text>
</g>
<g >
<title>nlohmann::detail::dtoa_impl::grisu2_digit_gen (7 samples, 0.05%)</title><rect x="1030.3" y="2053" width="0.5" height="15.0" fill="rgb(225,94,1)" rx="2" ry="2" />
<text  x="1033.29" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.04%)</title><rect x="1183.3" y="2037" width="0.5" height="15.0" fill="rgb(234,10,0)" rx="2" ry="2" />
<text  x="1186.28" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1621" width="0.4" height="15.0" fill="rgb(226,123,6)" rx="2" ry="2" />
<text  x="1186.44" y="1631.5" ></text>
</g>
<g >
<title>onmt::get_alphabet_id (7 samples, 0.05%)</title><rect x="1069.1" y="2053" width="0.6" height="15.0" fill="rgb(217,197,15)" rx="2" ry="2" />
<text  x="1072.11" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="885" width="6.7" height="15.0" fill="rgb(232,202,41)" rx="2" ry="2" />
<text  x="65.73" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25 samples, 0.17%)</title><rect x="451.2" y="1877" width="1.9" height="15.0" fill="rgb(227,198,47)" rx="2" ry="2" />
<text  x="454.17" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="741" width="0.4" height="15.0" fill="rgb(217,54,31)" rx="2" ry="2" />
<text  x="1186.44" y="751.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1445" width="6.7" height="15.0" fill="rgb(252,123,26)" rx="2" ry="2" />
<text  x="65.73" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1183.8" y="1957" width="0.3" height="15.0" fill="rgb(217,135,41)" rx="2" ry="2" />
<text  x="1186.75" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1173" width="6.7" height="15.0" fill="rgb(213,97,20)" rx="2" ry="2" />
<text  x="65.73" y="1183.5" ></text>
</g>
<g >
<title>torch::jit::InterpreterStateImpl::runImpl (35 samples, 0.23%)</title><rect x="1153.6" y="1957" width="2.7" height="15.0" fill="rgb(236,127,48)" rx="2" ry="2" />
<text  x="1156.55" y="1967.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (40 samples, 0.27%)</title><rect x="651.7" y="2037" width="3.2" height="15.0" fill="rgb(254,219,16)" rx="2" ry="2" />
<text  x="654.75" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="69" width="0.4" height="15.0" fill="rgb(230,179,13)" rx="2" ry="2" />
<text  x="1186.44" y="79.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::t (6 samples, 0.04%)</title><rect x="744.5" y="1989" width="0.5" height="15.0" fill="rgb(251,122,37)" rx="2" ry="2" />
<text  x="747.49" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="613" width="6.7" height="15.0" fill="rgb(224,225,21)" rx="2" ry="2" />
<text  x="65.73" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (3 samples, 0.02%)</title><rect x="1187.5" y="2053" width="0.3" height="15.0" fill="rgb(248,167,13)" rx="2" ry="2" />
<text  x="1190.55" y="2063.5" ></text>
</g>
<g >
<title>torch::jit::Module::forward (4 samples, 0.03%)</title><rect x="470.9" y="1925" width="0.3" height="15.0" fill="rgb(219,206,8)" rx="2" ry="2" />
<text  x="473.93" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="517" width="0.3" height="15.0" fill="rgb(244,228,26)" rx="2" ry="2" />
<text  x="1186.83" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="451.7" y="901" width="0.2" height="15.0" fill="rgb(248,9,47)" rx="2" ry="2" />
<text  x="454.72" y="911.5" ></text>
</g>
<g >
<title>std::locale::operator= (2 samples, 0.01%)</title><rect x="50.1" y="2021" width="0.1" height="15.0" fill="rgb(205,181,51)" rx="2" ry="2" />
<text  x="53.08" y="2031.5" ></text>
</g>
<g >
<title>THTensor_setStorageNd (2 samples, 0.01%)</title><rect x="638.5" y="2005" width="0.1" height="15.0" fill="rgb(222,63,32)" rx="2" ry="2" />
<text  x="641.46" y="2015.5" ></text>
</g>
<g >
<title>at::native::norm_out (2 samples, 0.01%)</title><rect x="1154.7" y="1877" width="0.1" height="15.0" fill="rgb(222,98,49)" rx="2" ry="2" />
<text  x="1157.66" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (7 samples, 0.05%)</title><rect x="743.7" y="2021" width="0.5" height="15.0" fill="rgb(242,2,36)" rx="2" ry="2" />
<text  x="746.70" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1141" width="6.7" height="15.0" fill="rgb(217,122,48)" rx="2" ry="2" />
<text  x="65.73" y="1151.5" ></text>
</g>
<g >
<title>c10::TensorImpl::release_resources (4 samples, 0.03%)</title><rect x="644.6" y="2005" width="0.3" height="15.0" fill="rgb(246,74,19)" rx="2" ry="2" />
<text  x="647.63" y="2015.5" ></text>
</g>
<g >
<title>torch::jit::GraphFunction::ensure_defined (2 samples, 0.01%)</title><rect x="1151.6" y="2005" width="0.1" height="15.0" fill="rgb(229,97,20)" rx="2" ry="2" />
<text  x="1154.58" y="2015.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::readWord (72 samples, 0.48%)</title><rect x="863.1" y="2053" width="5.7" height="15.0" fill="rgb(228,189,26)" rx="2" ry="2" />
<text  x="866.08" y="2063.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (143 samples, 0.96%)</title><rect x="1168.6" y="2053" width="11.3" height="15.0" fill="rgb(209,125,9)" rx="2" ry="2" />
<text  x="1171.57" y="2063.5" ></text>
</g>
<g >
<title>torch::jit::InterpreterState::run (45 samples, 0.30%)</title><rect x="1152.9" y="1973" width="3.6" height="15.0" fill="rgb(232,33,33)" rx="2" ry="2" />
<text  x="1155.92" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1653" width="0.4" height="15.0" fill="rgb(217,150,31)" rx="2" ry="2" />
<text  x="1186.44" y="1663.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="170.1" y="1973" width="0.2" height="15.0" fill="rgb(249,217,29)" rx="2" ry="2" />
<text  x="173.10" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="451.7" y="1333" width="0.2" height="15.0" fill="rgb(208,8,20)" rx="2" ry="2" />
<text  x="454.72" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="645" width="0.4" height="15.0" fill="rgb(210,122,1)" rx="2" ry="2" />
<text  x="1186.44" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24 samples, 0.16%)</title><rect x="451.2" y="1813" width="1.9" height="15.0" fill="rgb(219,140,37)" rx="2" ry="2" />
<text  x="454.24" y="1823.5" ></text>
</g>
<g >
<title>TSlinkClustering::ClusterBatch (2,989 samples, 20.03%)</title><rect x="183.3" y="1973" width="236.3" height="15.0" fill="rgb(205,54,54)" rx="2" ry="2" />
<text  x="186.30" y="1983.5" >TSlinkClustering::ClusterBatch</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1183.8" y="1845" width="0.3" height="15.0" fill="rgb(214,53,30)" rx="2" ry="2" />
<text  x="1186.75" y="1855.5" ></text>
</g>
<g >
<title>fasttext::Model::predict (14 samples, 0.09%)</title><rect x="77.8" y="2021" width="1.1" height="15.0" fill="rgb(209,147,40)" rx="2" ry="2" />
<text  x="80.76" y="2031.5" ></text>
</g>
<g >
<title>at::Tensor::contiguous (7 samples, 0.05%)</title><rect x="464.1" y="1925" width="0.6" height="15.0" fill="rgb(248,122,11)" rx="2" ry="2" />
<text  x="467.13" y="1935.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_Task_state&lt;std::_Bind&lt;std::optional&lt;TDbDocument&gt;  (2 samples, 0.01%)</title><rect x="50.9" y="1989" width="0.1" height="15.0" fill="rgb(216,27,10)" rx="2" ry="2" />
<text  x="53.88" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="451.6" y="1413" width="0.3" height="15.0" fill="rgb(227,179,28)" rx="2" ry="2" />
<text  x="454.64" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="901" width="0.3" height="15.0" fill="rgb(223,136,50)" rx="2" ry="2" />
<text  x="1186.83" y="911.5" ></text>
</g>
<g >
<title>[unknown] (59 samples, 0.40%)</title><rect x="62.8" y="69" width="4.7" height="15.0" fill="rgb(207,35,12)" rx="2" ry="2" />
<text  x="65.81" y="79.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="169.5" y="1957" width="0.3" height="15.0" fill="rgb(243,49,4)" rx="2" ry="2" />
<text  x="172.55" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="101" width="0.3" height="15.0" fill="rgb(231,43,51)" rx="2" ry="2" />
<text  x="1186.83" y="111.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp;  (2 samples, 0.01%)</title><rect x="67.6" y="69" width="0.1" height="15.0" fill="rgb(215,132,25)" rx="2" ry="2" />
<text  x="70.56" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="451.6" y="1621" width="0.6" height="15.0" fill="rgb(224,138,8)" rx="2" ry="2" />
<text  x="454.64" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="451.7" y="1125" width="0.2" height="15.0" fill="rgb(220,146,7)" rx="2" ry="2" />
<text  x="454.72" y="1135.5" ></text>
</g>
<g >
<title>TDbDocument::TDbDocument (2 samples, 0.01%)</title><rect x="421.0" y="2005" width="0.1" height="15.0" fill="rgb(229,28,16)" rx="2" ry="2" />
<text  x="423.96" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1669" width="0.4" height="15.0" fill="rgb(236,160,44)" rx="2" ry="2" />
<text  x="1186.44" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1029" width="0.4" height="15.0" fill="rgb(242,217,10)" rx="2" ry="2" />
<text  x="1186.44" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="565" width="0.3" height="15.0" fill="rgb(225,164,44)" rx="2" ry="2" />
<text  x="1186.83" y="575.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="693" width="6.7" height="15.0" fill="rgb(227,207,5)" rx="2" ry="2" />
<text  x="65.73" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="645" width="0.3" height="15.0" fill="rgb(245,32,50)" rx="2" ry="2" />
<text  x="1186.83" y="655.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1909" width="6.7" height="15.0" fill="rgb(240,169,25)" rx="2" ry="2" />
<text  x="65.73" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="853" width="0.3" height="15.0" fill="rgb(245,214,3)" rx="2" ry="2" />
<text  x="1186.83" y="863.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="229" width="6.7" height="15.0" fill="rgb(206,21,52)" rx="2" ry="2" />
<text  x="65.73" y="239.5" ></text>
</g>
<g >
<title>[unknown] (42 samples, 0.28%)</title><rect x="758.6" y="2037" width="3.4" height="15.0" fill="rgb(216,162,29)" rx="2" ry="2" />
<text  x="761.64" y="2047.5" ></text>
</g>
<g >
<title>at::TensorIterator::compute_shape@plt (2 samples, 0.01%)</title><rect x="68.0" y="37" width="0.2" height="15.0" fill="rgb(252,51,24)" rx="2" ry="2" />
<text  x="71.03" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="85" width="0.4" height="15.0" fill="rgb(205,193,44)" rx="2" ry="2" />
<text  x="1186.44" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (10 samples, 0.07%)</title><rect x="452.4" y="1541" width="0.7" height="15.0" fill="rgb(248,126,39)" rx="2" ry="2" />
<text  x="455.35" y="1551.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (5 samples, 0.03%)</title><rect x="58.1" y="2005" width="0.4" height="15.0" fill="rgb(242,25,40)" rx="2" ry="2" />
<text  x="61.07" y="2015.5" ></text>
</g>
<g >
<title>at::CPUType::empty_memory_format (3 samples, 0.02%)</title><rect x="639.7" y="1989" width="0.3" height="15.0" fill="rgb(253,43,22)" rx="2" ry="2" />
<text  x="642.73" y="1999.5" ></text>
</g>
<g >
<title>strlen@plt (19 samples, 0.13%)</title><rect x="1188.0" y="2053" width="1.5" height="15.0" fill="rgb(229,105,48)" rx="2" ry="2" />
<text  x="1191.02" y="2063.5" ></text>
</g>
<g >
<title>at::(anonymous namespace)::empty_memory_format (11 samples, 0.07%)</title><rect x="758.6" y="2021" width="0.9" height="15.0" fill="rgb(242,200,15)" rx="2" ry="2" />
<text  x="761.64" y="2031.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="436.5" y="1957" width="0.2" height="15.0" fill="rgb(208,162,43)" rx="2" ry="2" />
<text  x="439.46" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1285" width="6.7" height="15.0" fill="rgb(218,164,23)" rx="2" ry="2" />
<text  x="65.73" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="453" width="0.4" height="15.0" fill="rgb(206,4,39)" rx="2" ry="2" />
<text  x="1186.44" y="463.5" ></text>
</g>
<g >
<title>c10::SmallVectorImpl&lt;at::OperandInfo&gt;::emplace_back&lt;at::Tensor const&amp;&gt; (5 samples, 0.03%)</title><rect x="639.3" y="1909" width="0.4" height="15.0" fill="rgb(236,74,52)" rx="2" ry="2" />
<text  x="642.33" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1183.4" y="1877" width="0.4" height="15.0" fill="rgb(241,172,30)" rx="2" ry="2" />
<text  x="1186.36" y="1887.5" ></text>
</g>
<g >
<title>at::TensorIterator::nullary_op (9 samples, 0.06%)</title><rect x="68.3" y="69" width="0.7" height="15.0" fill="rgb(233,25,33)" rx="2" ry="2" />
<text  x="71.27" y="79.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="1221" width="6.7" height="15.0" fill="rgb(212,102,10)" rx="2" ry="2" />
<text  x="65.73" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (9 samples, 0.06%)</title><rect x="452.4" y="1509" width="0.7" height="15.0" fill="rgb(248,42,26)" rx="2" ry="2" />
<text  x="455.43" y="1519.5" ></text>
</g>
<g >
<title>torch::autograd::VariableType::mm (3 samples, 0.02%)</title><rect x="743.9" y="2005" width="0.3" height="15.0" fill="rgb(231,150,53)" rx="2" ry="2" />
<text  x="746.93" y="2015.5" ></text>
</g>
<g >
<title>onmt::ITokenizer::tokenize_stream (3 samples, 0.02%)</title><rect x="1033.1" y="2053" width="0.2" height="15.0" fill="rgb(223,38,34)" rx="2" ry="2" />
<text  x="1036.06" y="2063.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (24 samples, 0.16%)</title><rect x="465.4" y="1909" width="1.9" height="15.0" fill="rgb(211,3,49)" rx="2" ry="2" />
<text  x="468.40" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (12 samples, 0.08%)</title><rect x="472.6" y="1941" width="0.9" height="15.0" fill="rgb(213,57,31)" rx="2" ry="2" />
<text  x="475.59" y="1951.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (19 samples, 0.13%)</title><rect x="739.1" y="2005" width="1.5" height="15.0" fill="rgb(224,11,39)" rx="2" ry="2" />
<text  x="742.11" y="2015.5" ></text>
</g>
<g >
<title>at::native::make_reduction (10 samples, 0.07%)</title><rect x="755.7" y="2053" width="0.8" height="15.0" fill="rgb(242,192,27)" rx="2" ry="2" />
<text  x="758.71" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="245" width="0.4" height="15.0" fill="rgb(207,121,27)" rx="2" ry="2" />
<text  x="1186.44" y="255.5" ></text>
</g>
<g >
<title>c10::KernelFunction::make_boxed_function&lt;&amp;(anonymous namespace)::variable_fallback_kernel&gt; (6 samples, 0.04%)</title><rect x="756.8" y="2053" width="0.5" height="15.0" fill="rgb(251,212,6)" rx="2" ry="2" />
<text  x="759.82" y="2063.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (3 samples, 0.02%)</title><rect x="746.6" y="2053" width="0.3" height="15.0" fill="rgb(214,48,9)" rx="2" ry="2" />
<text  x="749.62" y="2063.5" ></text>
</g>
<g >
<title>c10::impl::boxAndCallBoxedFunc&lt;bool, at::Tensor const&amp;&gt; (2 samples, 0.01%)</title><rect x="642.0" y="1973" width="0.2" height="15.0" fill="rgb(206,70,1)" rx="2" ry="2" />
<text  x="645.02" y="1983.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (10 samples, 0.07%)</title><rect x="432.9" y="1925" width="0.8" height="15.0" fill="rgb(224,167,2)" rx="2" ry="2" />
<text  x="435.90" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="965" width="0.4" height="15.0" fill="rgb(209,192,0)" rx="2" ry="2" />
<text  x="1186.44" y="975.5" ></text>
</g>
<g >
<title>at::(anonymous namespace)::zeros (16 samples, 0.11%)</title><rect x="759.5" y="2021" width="1.3" height="15.0" fill="rgb(247,0,30)" rx="2" ry="2" />
<text  x="762.51" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="451.6" y="1573" width="0.6" height="15.0" fill="rgb(211,82,12)" rx="2" ry="2" />
<text  x="454.64" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="451.7" y="1029" width="0.2" height="15.0" fill="rgb(247,180,39)" rx="2" ry="2" />
<text  x="454.72" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="821" width="0.4" height="15.0" fill="rgb(245,74,50)" rx="2" ry="2" />
<text  x="1186.44" y="831.5" ></text>
</g>
<g >
<title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor  (3 samples, 0.02%)</title><rect x="761.7" y="2021" width="0.3" height="15.0" fill="rgb(218,82,23)" rx="2" ry="2" />
<text  x="764.72" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.06%)</title><rect x="452.4" y="1429" width="0.7" height="15.0" fill="rgb(250,73,8)" rx="2" ry="2" />
<text  x="455.43" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1461" width="0.4" height="15.0" fill="rgb(237,119,17)" rx="2" ry="2" />
<text  x="1186.44" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.05%)</title><rect x="452.6" y="1333" width="0.5" height="15.0" fill="rgb(243,152,1)" rx="2" ry="2" />
<text  x="455.59" y="1343.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="438.7" y="1941" width="0.1" height="15.0" fill="rgb(239,173,15)" rx="2" ry="2" />
<text  x="441.67" y="1951.5" ></text>
</g>
<g >
<title>c10::KernelFunction::getFunctor_ (2 samples, 0.01%)</title><rect x="638.2" y="2037" width="0.2" height="15.0" fill="rgb(242,111,10)" rx="2" ry="2" />
<text  x="641.23" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="451.6" y="1429" width="0.3" height="15.0" fill="rgb(219,147,8)" rx="2" ry="2" />
<text  x="454.64" y="1439.5" ></text>
</g>
<g >
<title>onmt::is_alphabet (58 samples, 0.39%)</title><rect x="1069.7" y="2053" width="4.6" height="15.0" fill="rgb(221,202,23)" rx="2" ry="2" />
<text  x="1072.67" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.4" y="1381" width="0.4" height="15.0" fill="rgb(222,66,0)" rx="2" ry="2" />
<text  x="1186.44" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="597" width="0.4" height="15.0" fill="rgb(221,46,13)" rx="2" ry="2" />
<text  x="1186.44" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="452.0" y="1429" width="0.2" height="15.0" fill="rgb(211,213,38)" rx="2" ry="2" />
<text  x="454.96" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.05%)</title><rect x="451.6" y="1493" width="0.6" height="15.0" fill="rgb(231,59,18)" rx="2" ry="2" />
<text  x="454.64" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="451.7" y="869" width="0.2" height="15.0" fill="rgb(213,58,33)" rx="2" ry="2" />
<text  x="454.72" y="879.5" ></text>
</g>
<g >
<title>std::vector&lt;onmt::AnnotatedToken, std::allocator&lt;onmt::AnnotatedToken&gt; &gt;::reserve (2 samples, 0.01%)</title><rect x="686.8" y="2005" width="0.1" height="15.0" fill="rgb(229,212,49)" rx="2" ry="2" />
<text  x="689.77" y="2015.5" ></text>
</g>
<g >
<title>torch::zeros (14 samples, 0.09%)</title><rect x="471.2" y="1925" width="1.2" height="15.0" fill="rgb(220,0,46)" rx="2" ry="2" />
<text  x="474.25" y="1935.5" ></text>
</g>
<g >
<title>at::(anonymous namespace)::zeros (2 samples, 0.01%)</title><rect x="471.9" y="1877" width="0.1" height="15.0" fill="rgb(217,69,36)" rx="2" ry="2" />
<text  x="474.88" y="1887.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (13 samples, 0.09%)</title><rect x="57.0" y="2021" width="1.1" height="15.0" fill="rgb(224,13,49)" rx="2" ry="2" />
<text  x="60.04" y="2031.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (4 samples, 0.03%)</title><rect x="446.3" y="1925" width="0.4" height="15.0" fill="rgb(206,160,20)" rx="2" ry="2" />
<text  x="449.34" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="389" width="0.3" height="15.0" fill="rgb(219,169,14)" rx="2" ry="2" />
<text  x="1186.83" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1109" width="0.4" height="15.0" fill="rgb(250,125,29)" rx="2" ry="2" />
<text  x="1186.44" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="597" width="0.3" height="15.0" fill="rgb(218,170,28)" rx="2" ry="2" />
<text  x="1186.83" y="607.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (24 samples, 0.16%)</title><rect x="59.1" y="1957" width="1.9" height="15.0" fill="rgb(249,212,19)" rx="2" ry="2" />
<text  x="62.10" y="1967.5" ></text>
</g>
<g >
<title>torch::jit::(anonymous namespace)::{lambda (2 samples, 0.01%)</title><rect x="646.3" y="2005" width="0.1" height="15.0" fill="rgb(244,27,40)" rx="2" ry="2" />
<text  x="649.29" y="2015.5" ></text>
</g>
<g >
<title>c10::KernelFunction::callUnboxed&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Storage, long, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt; &gt; (11 samples, 0.07%)</title><rect x="469.2" y="1829" width="0.9" height="15.0" fill="rgb(210,127,5)" rx="2" ry="2" />
<text  x="472.19" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="451.9" y="1461" width="0.3" height="15.0" fill="rgb(229,38,42)" rx="2" ry="2" />
<text  x="454.88" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="709" width="0.3" height="15.0" fill="rgb(232,82,37)" rx="2" ry="2" />
<text  x="1186.83" y="719.5" ></text>
</g>
<g >
<title>at::TensorIterator::reorder_dimensions (3 samples, 0.02%)</title><rect x="636.8" y="2037" width="0.2" height="15.0" fill="rgb(241,156,1)" rx="2" ry="2" />
<text  x="639.80" y="2047.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (11 samples, 0.07%)</title><rect x="453.4" y="1941" width="0.8" height="15.0" fill="rgb(245,75,51)" rx="2" ry="2" />
<text  x="456.38" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.03%)</title><rect x="1183.8" y="341" width="0.3" height="15.0" fill="rgb(242,5,40)" rx="2" ry="2" />
<text  x="1186.83" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1077" width="0.4" height="15.0" fill="rgb(241,67,25)" rx="2" ry="2" />
<text  x="1186.44" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (10 samples, 0.07%)</title><rect x="452.4" y="1573" width="0.7" height="15.0" fill="rgb(215,193,1)" rx="2" ry="2" />
<text  x="455.35" y="1583.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.05%)</title><rect x="692.8" y="2021" width="0.5" height="15.0" fill="rgb(243,219,22)" rx="2" ry="2" />
<text  x="695.78" y="2031.5" ></text>
</g>
<g >
<title>torch::autograd::compute_requires_grad&lt;at::Tensor const&amp;&gt; (2 samples, 0.01%)</title><rect x="1155.5" y="1925" width="0.2" height="15.0" fill="rgb(254,219,32)" rx="2" ry="2" />
<text  x="1158.53" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="452.9" y="1109" width="0.2" height="15.0" fill="rgb(250,3,50)" rx="2" ry="2" />
<text  x="455.91" y="1119.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="421.8" y="1989" width="0.1" height="15.0" fill="rgb(250,71,22)" rx="2" ry="2" />
<text  x="424.75" y="1999.5" ></text>
</g>
<g >
<title>at::TensorIterator::binary_op (6 samples, 0.04%)</title><rect x="639.3" y="1925" width="0.4" height="15.0" fill="rgb(224,4,17)" rx="2" ry="2" />
<text  x="642.25" y="1935.5" ></text>
</g>
<g >
<title>CleanFileName (3 samples, 0.02%)</title><rect x="168.9" y="2005" width="0.3" height="15.0" fill="rgb(215,174,53)" rx="2" ry="2" />
<text  x="171.91" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="452.7" y="1285" width="0.4" height="15.0" fill="rgb(226,110,13)" rx="2" ry="2" />
<text  x="455.75" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="277" width="0.4" height="15.0" fill="rgb(227,30,40)" rx="2" ry="2" />
<text  x="1186.44" y="287.5" ></text>
</g>
<g >
<title>at::CPUType::empty_memory_format (5 samples, 0.03%)</title><rect x="472.6" y="1909" width="0.4" height="15.0" fill="rgb(230,41,18)" rx="2" ry="2" />
<text  x="475.59" y="1919.5" ></text>
</g>
<g >
<title>TNewsCluster::~TNewsCluster (7 samples, 0.05%)</title><rect x="421.4" y="2005" width="0.5" height="15.0" fill="rgb(242,211,26)" rx="2" ry="2" />
<text  x="424.36" y="2015.5" ></text>
</g>
<g >
<title>c10::SmallVectorImpl&lt;at::OperandInfo&gt;::emplace_back&lt;at::Tensor const&amp;&gt; (2 samples, 0.01%)</title><rect x="68.8" y="53" width="0.2" height="15.0" fill="rgb(243,39,32)" rx="2" ry="2" />
<text  x="71.82" y="63.5" ></text>
</g>
<g >
<title>[unknown] (84 samples, 0.56%)</title><rect x="62.7" y="485" width="6.7" height="15.0" fill="rgb(244,21,17)" rx="2" ry="2" />
<text  x="65.73" y="495.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (26 samples, 0.17%)</title><rect x="434.4" y="1941" width="2.1" height="15.0" fill="rgb(253,4,22)" rx="2" ry="2" />
<text  x="437.40" y="1951.5" ></text>
</g>
<g >
<title>std::__move_merge&lt;__gnu_cxx::__normal_iterator&lt;TDbDocument*, std::vector&lt;TDbDocument, std::allocator&lt;TDbDocument&gt; &gt; &gt;, TDbDocument*, __gnu_cxx::__ops::_Iter_comp_iter&lt;TClusterer::Cluster (2 samples, 0.01%)</title><rect x="420.7" y="1957" width="0.2" height="15.0" fill="rgb(237,77,24)" rx="2" ry="2" />
<text  x="423.73" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.4" y="1717" width="0.4" height="15.0" fill="rgb(208,10,11)" rx="2" ry="2" />
<text  x="1186.44" y="1727.5" ></text>
</g>
<g >
<title>boost::algorithm::join&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, char [2]&gt; (71 samples, 0.48%)</title><rect x="454.2" y="1941" width="5.7" height="15.0" fill="rgb(239,32,12)" rx="2" ry="2" />
<text  x="457.25" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.03%)</title><rect x="1183.8" y="1285" width="0.3" height="15.0" fill="rgb(217,182,45)" rx="2" ry="2" />
<text  x="1186.83" y="1295.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;void&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.01%)</title><rect x="445.1" y="1989" width="0.1" height="15.0" fill="rgb(239,147,31)" rx="2" ry="2" />
<text  x="448.08" y="1999.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I_column_family.cc (9 samples, 0.06%)</title><rect x="745.6" y="2053" width="0.7" height="15.0" fill="rgb(210,21,20)" rx="2" ry="2" />
<text  x="748.59" y="2063.5" ></text>
</g>
</g>
</svg>
